import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as i,a as l,b as n,d as s,e as t,f as e}from"./app-XkPbdq-W.js";const u={},r=e('<h1 id="rust-语言圣经笔记-一" tabindex="-1"><a class="header-anchor" href="#rust-语言圣经笔记-一" aria-hidden="true">#</a> Rust 语言圣经笔记（一）</h1><h2 id="rust-基础入门" tabindex="-1"><a class="header-anchor" href="#rust-基础入门" aria-hidden="true">#</a> Rust 基础入门</h2><ul><li>主要部分： <ul><li>变量绑定与解构</li><li>基础类型</li><li>所有权和借用</li><li>复合类型</li></ul></li></ul>',3),d=n("h3",{id:"变量绑定与解构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#变量绑定与解构","aria-hidden":"true"},"#"),s(" 变量绑定与解构")],-1),k=n("h4",{id:"变量命名",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#变量命名","aria-hidden":"true"},"#"),s(" 变量命名")],-1),m={href:"https://course.rs/practice/naming.html",target:"_blank",rel:"noopener noreferrer"},h=e(`<h4 id="变量绑定" tabindex="-1"><a class="header-anchor" href="#变量绑定" aria-hidden="true">#</a> 变量绑定</h4><ul><li>因为 Rust 核心原则是-- <strong>所有权</strong>，所以绑定含义更准确</li></ul><h4 id="变量可变性" tabindex="-1"><a class="header-anchor" href="#变量可变性" aria-hidden="true">#</a> 变量可变性</h4><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 默认不可变</span>
  <span class="token comment">// 使用下划线开头忽略未使用变量</span>
  <span class="token keyword">let</span> _x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token comment">// mut 关键字让变量变为可变</span>
  <span class="token keyword">let</span> <span class="token keyword">mut</span> _x <span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="变量解构" tabindex="-1"><a class="header-anchor" href="#变量解构" aria-hidden="true">#</a> 变量解构</h4><ul><li>需要注意的是，使用 += 的赋值语句还不支持解构式赋值。</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Struct</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">:</span> <span class="token keyword">i32</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// _ 代表匹配一个值，但是我们不关心具体的值是什么，因此没有使用一个变量名而是使用了 _</span>
    <span class="token punctuation">[</span>c<span class="token punctuation">,</span> <span class="token punctuation">..</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> _<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">Struct</span> <span class="token punctuation">{</span> e<span class="token punctuation">,</span> <span class="token punctuation">..</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token class-name">Struct</span> <span class="token punctuation">{</span> e<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="变量和常量之间的差异" tabindex="-1"><a class="header-anchor" href="#变量和常量之间的差异" aria-hidden="true">#</a> 变量和常量之间的差异</h4><ul><li>常量不允许使用 mut。常量不仅仅默认不可变，而且自始至终不可变，因为常量在编译完成后，已经确定它的值。</li><li>常量使用 const 关键字而不是 let 关键字来声明，并且值的类型必须标注。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const MAX_POINTS: u32 = 100_000;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="变量遮蔽-shadowing" tabindex="-1"><a class="header-anchor" href="#变量遮蔽-shadowing" aria-hidden="true">#</a> 变量遮蔽(shadowing)</h4><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token comment">// 在main函数的作用域内对之前的x进行遮蔽</span>
    <span class="token keyword">let</span> x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token punctuation">{</span>
        <span class="token comment">// 在当前的花括号作用域内，对之前的x进行遮蔽</span>
        <span class="token keyword">let</span> x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of x in the inner scope is: {}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of x is: {}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="课后练习" tabindex="-1"><a class="header-anchor" href="#课后练习" aria-hidden="true">#</a> 课后练习</h4>`,13),v={href:"https://zh.practice.rs/variables.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/sunface/rust-by-practice/blob/master/solutions/variables.md",target:"_blank",rel:"noopener noreferrer"},f=e(`<h3 id="整数类型" tabindex="-1"><a class="header-anchor" href="#整数类型" aria-hidden="true">#</a> 整数类型</h3><ul><li>基础信息 <ul><li>类型定义的形式统一为：有无符号 + 类型大小(位数)。<strong>无符号数</strong>表示数字只能取正数和0，而<strong>有符号</strong>则表示数字可以取正数、负数还有0。</li><li>每个有符号类型规定的数字范围是 -(2n - 1) ~ 2n - 1 - 1，其中 n 是该定义形式的位长度。因此 i8 可存储数字范围是 -(27) ~ 27 - 1，即 -128 ~ 127。无符号类型可以存储的数字范围是 0 ~ 2n - 1，所以 u8 能够存储的数字为 0 ~ 28 - 1，即 0 ~ 255。</li></ul></li><li>整形溢出 <ul><li>假设有一个 u8 ，它可以存放从 0 到 255 的值。那么当你将其修改为范围之外的值，比如 256，则会发生整型溢出。</li></ul></li><li>要显式处理可能的溢出，可以使用标准库针对原始数字类型提供的这些方法： <ul><li>使用 wrapping_* 方法在所有模式下都按照补码循环溢出规则处理，例如 wrapping_add</li><li>如果使用 checked_* 方法时发生溢出，则返回 None 值</li><li>使用 overflowing_* 方法返回该值和一个指示是否存在溢出的布尔值</li><li>使用 saturating_* 方法使值达到最小值或最大值</li></ul></li></ul><h3 id="浮点类型" tabindex="-1"><a class="header-anchor" href="#浮点类型" aria-hidden="true">#</a> 浮点类型</h3><ul><li>f32 和 f64，分别为 32 位和 64 位大小。默认浮点类型是 f64，在现代的 CPU 中它的速度与 f32 几乎相同，但精度更高。</li><li>浮点数陷阱 <ul><li>浮点数往往是你想要数字的近似表达</li><li>浮点数在某些特性上是反直觉的</li></ul></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> abc<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">f32</span><span class="token punctuation">,</span> <span class="token keyword">f32</span><span class="token punctuation">,</span> <span class="token keyword">f32</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> xyz<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">f64</span><span class="token punctuation">,</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> <span class="token keyword">f64</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;abc (f32)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;   0.1 + 0.2: {:x}&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>abc<span class="token number">.0</span> <span class="token operator">+</span> abc<span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_bits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;         0.3: {:x}&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>abc<span class="token number">.2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_bits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;xyz (f64)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;   0.1 + 0.2: {:x}&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>xyz<span class="token number">.0</span> <span class="token operator">+</span> xyz<span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_bits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;         0.3: {:x}&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>xyz<span class="token number">.2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_bits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">assert!</span><span class="token punctuation">(</span>abc<span class="token number">.0</span> <span class="token operator">+</span> abc<span class="token number">.1</span> <span class="token operator">==</span> abc<span class="token number">.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert!</span><span class="token punctuation">(</span>xyz<span class="token number">.0</span> <span class="token operator">+</span> xyz<span class="token number">.1</span> <span class="token operator">==</span> xyz<span class="token number">.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>abc (f32)
   0.1 + 0.2: 3e99999a
         0.3: 3e99999a

xyz (f64)
   0.1 + 0.2: 3fd3333333333334
         0.3: 3fd3333333333333

thread &#39;main&#39; panicked at &#39;assertion failed: xyz.0 + xyz.1 == xyz.2&#39;,
➥ch2-add-floats.rs.rs:14:5
note: run with \`RUST_BACKTRACE=1\` environment variable to display
➥a backtrace
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>因为 f64 精度高很多，因此在小数点非常后面发生了一点微小的变化</li></ul><h4 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算" aria-hidden="true">#</a> 位运算</h4><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>&amp; 位与</td><td>相同位置均为1时则为1，否则为0</td></tr><tr><td>| 位或</td><td>相同位置只要有1时则为1，否则为0</td></tr><tr><td>^ 异或</td><td>相同位置不相同则为1，相同则为0</td></tr><tr><td>! 位非</td><td>把位中的0和1相互取反，即0置为1，1置为0</td></tr><tr><td>&lt;&lt; 左移</td><td>所有位向左移动指定位数，右位补0</td></tr><tr><td>&gt;&gt; 右移</td><td>所有位向右移动指定位数，带符号移动（正数补0，负数补1</td></tr></tbody></table><h4 id="序列" tabindex="-1"><a class="header-anchor" href="#序列" aria-hidden="true">#</a> 序列</h4><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..=</span><span class="token number">5</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">..=</span><span class="token char">&#39;z&#39;</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-as-完成类型转换" tabindex="-1"><a class="header-anchor" href="#使用-as-完成类型转换" aria-hidden="true">#</a> 使用 As 完成类型转换</h4><h4 id="有理数和复数" tabindex="-1"><a class="header-anchor" href="#有理数和复数" aria-hidden="true">#</a> 有理数和复数</h4><ul><li>有理数和复数</li><li>任意大小的整数和任意精度的浮点数</li><li>固定精度的十进制小数，常用于货币相关的场景</li></ul><h4 id="练习" tabindex="-1"><a class="header-anchor" href="#练习" aria-hidden="true">#</a> 练习</h4>`,16),g={href:"https://zh.practice.rs/basic-types/numbers.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/sunface/rust-by-practice/blob/master/solutions/basic-types/numbers.md",target:"_blank",rel:"noopener noreferrer"},y=e(`<h3 id="字符、布尔、单元类型" tabindex="-1"><a class="header-anchor" href="#字符、布尔、单元类型" aria-hidden="true">#</a> 字符、布尔、单元类型</h3><h4 id="字符类型-char" tabindex="-1"><a class="header-anchor" href="#字符类型-char" aria-hidden="true">#</a> 字符类型(char)</h4><div class="language-rus line-numbers-mode" data-ext="rus"><pre class="language-rus"><code>fn main() {
    let c = &#39;z&#39;;
    let z = &#39;ℤ&#39;;
    let g = &#39;国&#39;;
    let heart_eyed_cat = &#39;😻&#39;;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>由于 <code>Unicode</code> 都是 4 个字节编码，因此字符类型也是占用 4 个字节：</li></ul><h4 id="单元类型" tabindex="-1"><a class="header-anchor" href="#单元类型" aria-hidden="true">#</a> 单元类型</h4><p>单元类型就是 <code>()</code> ，对，你没看错，就是 <code>()</code> ，唯一的值也是 <code>()</code> ，一些读者读到这里可能就不愿意了，你也太敷衍了吧，管这叫类型？</p><p>只能说，再不起眼的东西，都有其用途，在目前为止的学习过程中，大家已经看到过很多次 <code>fn main()</code> 函数的使用吧？那么这个函数返回什么呢？</p><p>没错， <code>main</code> 函数就返回这个单元类型 <code>()</code>，你不能说 <code>main</code> 函数无返回值，因为没有返回值的函数在 Rust 中是有单独的定义的：<code>发散函数( diverge function )</code>，顾名思义，无法收敛的函数。</p><p>例如常见的 <code>println!()</code> 的返回值也是单元类型 <code>()</code>。</p><p>再比如，你可以用 <code>()</code> 作为 <code>map</code> 的值，表示我们不关注具体的值，只关注 <code>key</code>。 这种用法和 Go 语言的 <em><strong>struct{}</strong></em> 类似，可以作为一个值用来占位，但是完全<strong>不占用</strong>任何内存。</p><h4 id="练习-1" tabindex="-1"><a class="header-anchor" href="#练习-1" aria-hidden="true">#</a> 练习</h4>`,11),x={href:"https://zh.practice.rs/basic-types/char-bool-unit.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/sunface/rust-by-practice/blob/master/solutions/basic-types/char-bool.md",target:"_blank",rel:"noopener noreferrer"},q=e(`<h3 id="语句和表达式" tabindex="-1"><a class="header-anchor" href="#语句和表达式" aria-hidden="true">#</a> 语句和表达式</h3><h4 id="语句" tabindex="-1"><a class="header-anchor" href="#语句" aria-hidden="true">#</a> 语句</h4><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">f64</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以上都是语句，它们完成了一个具体的操作，但是并没有返回值，因此是语句。</li></ul><h4 id="表达式" tabindex="-1"><a class="header-anchor" href="#表达式" aria-hidden="true">#</a> 表达式</h4><ul><li><strong>表达式不能包含分号</strong></li><li>例如 <code>5 + 6</code>，在求值后，返回值 <code>11</code>，因此它就是一条表达式</li><li>调用一个函数是表达式，因为会返回一个值，调用宏也是表达式，用花括号包裹最终返回一个值的语句块也是表达式，总之，能返回值，它就是表达式:</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        x <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of y is: {}&quot;</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="练习-2" tabindex="-1"><a class="header-anchor" href="#练习-2" aria-hidden="true">#</a> 练习</h4>`,8),E={href:"https://zh.practice.rs/basic-types/statements-expressions.html",target:"_blank",rel:"noopener noreferrer"},B={href:"https://github.com/sunface/rust-by-practice/blob/master/solutions/basic-types/statements.md",target:"_blank",rel:"noopener noreferrer"},A=n("h3",{id:"函数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#函数","aria-hidden":"true"},"#"),s(" 函数")],-1),R=n("h4",{id:"函数要点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#函数要点","aria-hidden":"true"},"#"),s(" 函数要点")],-1),z={href:"https://course.rs/practice/naming.html",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"fn add_two() -> {}",-1),T=n("li",null,"函数的位置可以随便放，Rust 不关心我们在哪里定义了函数，只要有定义即可",-1),D=n("li",null,"每个函数参数都需要标注类型",-1),C=e(`<h4 id="函数参数" tabindex="-1"><a class="header-anchor" href="#函数参数" aria-hidden="true">#</a> 函数参数</h4><ul><li>Rust 是强类型语言，因此需要你为每一个函数参数都标识出它的具体类型，例如：</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">another_function</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">another_function</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">f32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of x is: {}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of y is: {}&quot;</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数返回" tabindex="-1"><a class="header-anchor" href="#函数返回" aria-hidden="true">#</a> 函数返回</h4><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">plus_or_minus</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span><span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> x <span class="token operator">-</span> <span class="token number">5</span>
    <span class="token punctuation">}</span>

    x <span class="token operator">+</span> <span class="token number">5</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">plus_or_minus</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of x is: {}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),P=n("li",null,[n("p",null,"无返回值"),n("ul",null,[n("li",null,[s("函数没有返回值，那么返回一个 "),n("code",null,"()")]),n("li",null,[s("通过 "),n("code",null,";"),s(" 结尾的表达式返回一个 "),n("code",null,"()")])])],-1),F={id:"永不返回的发散函数",tabindex:"-1"},U=n("a",{class:"header-anchor",href:"#永不返回的发散函数","aria-hidden":"true"},"#",-1),I={href:"https://course.rs/basic/base-type/function.html#%E6%B0%B8%E4%B8%8D%E8%BF%94%E5%9B%9E%E7%9A%84%E5%8F%91%E6%95%A3%E5%87%BD%E6%95%B0-",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"!",-1),N=n("ul",null,[n("li",null,[s("当用 "),n("code",null,"!"),s(" 作函数返回类型的时候，表示该函数永不返回( diverge function )，特别的，这种语法往往用做会导致程序崩溃的函数：不是很理解")])],-1),L=n("h4",{id:"练习-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#练习-3","aria-hidden":"true"},"#"),s(" 练习")],-1),H={href:"https://zh.practice.rs/basic-types/functions.html",target:"_blank",rel:"noopener noreferrer"},G={href:"https://github.com/sunface/rust-by-practice/blob/master/solutions/basic-types/functions.md",target:"_blank",rel:"noopener noreferrer"},K=n("h3",{id:"所有权",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#所有权","aria-hidden":"true"},"#"),s(" 所有权")],-1),M={id:"理清栈-stack-与堆-heap-的关系",tabindex:"-1"},O=n("a",{class:"header-anchor",href:"#理清栈-stack-与堆-heap-的关系","aria-hidden":"true"},"#",-1),X={href:"https://course.rs/basic/ownership/ownership.html#%E6%A0%88stack%E4%B8%8E%E5%A0%86heap",target:"_blank",rel:"noopener noreferrer"},j=e(`<h4 id="所有权原则" tabindex="-1"><a class="header-anchor" href="#所有权原则" aria-hidden="true">#</a> 所有权原则</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Rust 中每一个值都被一个变量所拥有，该变量被称为值的所有者
一个值同时只能被一个变量所拥有，或者说一个值只能拥有一个所有者
当所有者(变量)离开作用域范围时，这个值将被丢弃(drop)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="练习-4" tabindex="-1"><a class="header-anchor" href="#练习-4" aria-hidden="true">#</a> 练习</h4>`,3),J={href:"https://zh.practice.rs/ownership/ownership.html",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://github.com/sunface/rust-by-practice/blob/master/solutions/ownership/ownership.md",target:"_blank",rel:"noopener noreferrer"},W=n("h3",{id:"引用与借用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#引用与借用","aria-hidden":"true"},"#"),s(" 引用与借用")],-1),Y=n("h4",{id:"获取变量的引用-称之为借用-borrowing",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#获取变量的引用-称之为借用-borrowing","aria-hidden":"true"},"#"),s(),n("strong",null,"获取变量的引用，称之为借用(borrowing)")],-1),Z={id:"引用与解引用",tabindex:"-1"},$=n("a",{class:"header-anchor",href:"#引用与解引用","aria-hidden":"true"},"#",-1),nn={href:"https://course.rs/basic/ownership/borrowing.html#%E5%BC%95%E7%94%A8%E4%B8%8E%E8%A7%A3%E5%BC%95%E7%94%A8",target:"_blank",rel:"noopener noreferrer"},sn=e(`<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span>

    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="不可变引用" tabindex="-1"><a class="header-anchor" href="#不可变引用" aria-hidden="true">#</a> 不可变引用</h4><h4 id="可变引用" tabindex="-1"><a class="header-anchor" href="#可变引用" aria-hidden="true">#</a> 可变引用</h4><ul><li><strong>可变引用同时只能存在一个</strong></li><li><strong>同一作用域，特定数据只能有一个可变引用</strong></li><li><strong>可变引用与不可变引用不能同时存在</strong></li></ul><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><ul><li>同一时刻，你只能拥有要么一个可变引用, 要么任意多个不可变引用</li><li>引用必须总是有效的</li></ul><h4 id="练习-5" tabindex="-1"><a class="header-anchor" href="#练习-5" aria-hidden="true">#</a> 练习</h4>`,7),an={href:"https://zh.practice.rs/ownership/borrowing.html",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://github.com/sunface/rust-by-practice/blob/master/solutions/ownership/borrowing.md",target:"_blank",rel:"noopener noreferrer"},en=e('<h3 id="字符串与切片" tabindex="-1"><a class="header-anchor" href="#字符串与切片" aria-hidden="true">#</a> 字符串与切片</h3><h4 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h4><ul><li><strong>Rust 中的字符是 Unicode 类型，因此每个字符占据 4 个字节内存空间，但是在字符串中不一样，字符串是 UTF-8 编码，也就是字符串中的字符所占的字节数是变化的(1 - 4)</strong></li><li><strong>当 Rust 用户提到字符串时，往往指的就是 <code>String</code> 类型和 <code>&amp;str</code> 字符串切片类型，这两个类型都是 UTF-8 编码</strong>。</li></ul>',3),pn={id:"string-与-str-的转换",tabindex:"-1"},on=n("a",{class:"header-anchor",href:"#string-与-str-的转换","aria-hidden":"true"},"#",-1),cn={href:"https://course.rs/basic/compound-type/string-slice.html#string-%E4%B8%8E-str-%E7%9A%84%E8%BD%AC%E6%8D%A2",target:"_blank",rel:"noopener noreferrer"},ln=n("ul",null,[n("li",null,[n("code",null,'String::from("hello,world")')]),n("li",null,[n("code",null,'"hello,world".to_string()')])],-1),un={id:"字符串索引",tabindex:"-1"},rn=n("a",{class:"header-anchor",href:"#字符串索引","aria-hidden":"true"},"#",-1),dn={href:"https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B4%A2%E5%BC%95",target:"_blank",rel:"noopener noreferrer"},kn=e(`<ul><li>与其它语言不同，由于切片的索引是通过字节来进行，但是字符串又是 UTF-8 编码，因此你无法保证索引的字节刚好落在字符的边界上，从而导致出错，<strong>需要格外的小心</strong></li></ul><h4 id="操作字符串" tabindex="-1"><a class="header-anchor" href="#操作字符串" aria-hidden="true">#</a> 操作字符串</h4><ul><li>push</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    s<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token string">&quot;rust&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;追加字符串 push_str() -&gt; {}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>

    s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;追加字符 push() -&gt; {}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Insert</li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello rust!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;插入字符 insert() -&gt; {}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">insert_str</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&quot; I like&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;插入字符串 insert_str() -&gt; {}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>Replace</p><p>replace</p></li></ul><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> string_replace <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;I like rust. Learning rust is my favorite!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> new_string_replace <span class="token operator">=</span> string_replace<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;rust&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;RUST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">dbg!</span><span class="token punctuation">(</span>new_string_replace<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ replacen</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> string_replace <span class="token operator">=</span> <span class="token string">&quot;I like rust. Learning rust is my favorite!&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> new_string_replacen <span class="token operator">=</span> string_replace<span class="token punctuation">.</span><span class="token function">replacen</span><span class="token punctuation">(</span><span class="token string">&quot;rust&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;RUST&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">dbg!</span><span class="token punctuation">(</span>new_string_replacen<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ replace_range</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> string_replace_range <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;I like rust!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    string_replace_range<span class="token punctuation">.</span><span class="token function">replace_range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">..</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">&quot;R&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">dbg!</span><span class="token punctuation">(</span>string_replace_range<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),mn=e(`<li><p>Delete</p><p>pop —— 删除并返回字符串的最后一个字符</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> string_pop <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;rust pop 中文!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> p1 <span class="token operator">=</span> string_pop<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> p2 <span class="token operator">=</span> string_pop<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">dbg!</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">dbg!</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">dbg!</span><span class="token punctuation">(</span>string_pop<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>remove —— 删除并返回字符串中指定位置的字符</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> string_remove <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;测试remove方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span>
        <span class="token string">&quot;string_remove 占 {} 个字节&quot;</span><span class="token punctuation">,</span>
        <span class="token namespace">std<span class="token punctuation">::</span>mem<span class="token punctuation">::</span></span><span class="token function">size_of_val</span><span class="token punctuation">(</span>string_remove<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 删除第一个汉字</span>
    string_remove<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 下面代码会发生错误</span>
    <span class="token comment">// string_remove.remove(1);</span>
    <span class="token comment">// 直接删除第二个汉字</span>
    <span class="token comment">// string_remove.remove(3);</span>
    <span class="token macro property">dbg!</span><span class="token punctuation">(</span>string_remove<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>truncate</code> —— 删除字符串中从指定位置开始到结尾的全部字符</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> string_truncate <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;测试truncate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    string_truncate<span class="token punctuation">.</span><span class="token function">truncate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">dbg!</span><span class="token punctuation">(</span>string_truncate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>clear</code> —— 清空字符串</p></li>`,1),hn=n("p",null,"Concatenate",-1),vn=n("code",null,"+",-1),bn=n("code",null,"+=",-1),fn=n("code",null,"+",-1),gn=n("code",null,"std::string",-1),_n={href:"https://doc.rust-lang.org/std/string/struct.String.html#method.add",target:"_blank",rel:"noopener noreferrer"},yn=n("code",null,"add()",-1),xn=n("code",null,"add()",-1),wn=n("code",null,"+",-1),qn=n("code",null,"String",-1),En=n("strong",null,[n("code",null,"+"),s(" 是返回一个新的字符串，所以变量声明可以不需要 "),n("code",null,"mut"),s(" 关键字修饰")],-1),Bn=e(`<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> string_append <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> string_rust <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;rust&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// &amp;string_rust会自动解引用为&amp;str</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> string_append <span class="token operator">+</span> <span class="token operator">&amp;</span>string_rust<span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> result <span class="token operator">=</span> result <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">;</span> <span class="token comment">// \`result + &quot;!&quot;\` 中的 \`result\` 是不可变的</span>
    result <span class="token operator">+=</span> <span class="token string">&quot;!!!&quot;</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;连接字符串 + -&gt; {}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),An={id:"字符串转义",tabindex:"-1"},Rn=n("a",{class:"header-anchor",href:"#字符串转义","aria-hidden":"true"},"#",-1),zn={href:"https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89",target:"_blank",rel:"noopener noreferrer"},Sn={id:"操作-utf-8-字符串",tabindex:"-1"},Tn=n("a",{class:"header-anchor",href:"#操作-utf-8-字符串","aria-hidden":"true"},"#",-1),Dn={href:"https://course.rs/basic/compound-type/string-slice.html#%E6%93%8D%E4%BD%9C-utf-8-%E5%AD%97%E7%AC%A6%E4%B8%B2",target:"_blank",rel:"noopener noreferrer"},Cn=e(`<div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">&quot;中国人&quot;</span><span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token string">&quot;中国人&quot;</span><span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="练习-6" tabindex="-1"><a class="header-anchor" href="#练习-6" aria-hidden="true">#</a> 练习</h4>`,2),Pn=n("li",null,[n("p",null,"Rust By Practice，支持代码在线编辑和运行，并提供详细的习题解答。")],-1),Fn={href:"https://zh.practice.rs/compound-types/string.html",target:"_blank",rel:"noopener noreferrer"},Un={href:"https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/string.md",target:"_blank",rel:"noopener noreferrer"},In={href:"https://zh.practice.rs/compound-types/slice.html",target:"_blank",rel:"noopener noreferrer"},Vn={href:"https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/slice.md",target:"_blank",rel:"noopener noreferrer"},Nn={href:"https://zh.practice.rs/collections/String.html",target:"_blank",rel:"noopener noreferrer"},Ln={href:"https://github.com/sunface/rust-by-practice/blob/master/solutions/collections/String.md",target:"_blank",rel:"noopener noreferrer"},Hn=e(`<h3 id="元组" tabindex="-1"><a class="header-anchor" href="#元组" aria-hidden="true">#</a> 元组</h3><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h4><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">6.4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token operator">=</span> tup<span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of y is: {}&quot;</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">6.4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> five_hundred <span class="token operator">=</span> x<span class="token number">.0</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> six_point_four <span class="token operator">=</span> x<span class="token number">.1</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> one <span class="token operator">=</span> x<span class="token number">.2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token punctuation">(</span>s2<span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">calculate_length</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The length of &#39;{}&#39; is {}.&quot;</span><span class="token punctuation">,</span> s2<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">calculate_length</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// len() 返回字符串的长度</span>

    <span class="token punctuation">(</span>s<span class="token punctuation">,</span> length<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构体" tabindex="-1"><a class="header-anchor" href="#结构体" aria-hidden="true">#</a> 结构体</h3>`,6),Gn={id:"结构体语法",tabindex:"-1"},Kn=n("a",{class:"header-anchor",href:"#结构体语法","aria-hidden":"true"},"#",-1),Mn={href:"https://course.rs/basic/compound-type/struct.html#%E7%BB%93%E6%9E%84%E4%BD%93%E8%AF%AD%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},On=n("ul",null,[n("li",null,[s("通过关键字 "),n("code",null,"struct"),s(" 定义")]),n("li",null,[s("一个清晰明确的结构体 "),n("code",null,"名称")]),n("li",null,[s("几个有名字的结构体 "),n("code",null,"字段")])],-1),Xn={id:"使用-derive-debug-来打印结构体的信息",tabindex:"-1"},jn=n("a",{class:"header-anchor",href:"#使用-derive-debug-来打印结构体的信息","aria-hidden":"true"},"#",-1),Jn={href:"https://course.rs/basic/compound-type/struct.html#%E4%BD%BF%E7%94%A8-derivedebug-%E6%9D%A5%E6%89%93%E5%8D%B0%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E4%BF%A1%E6%81%AF",target:"_blank",rel:"noopener noreferrer"},Qn=n("code",null,"#[derive(Debug)\\]",-1),Wn=n("h4",{id:"练习-7",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#练习-7","aria-hidden":"true"},"#"),s(" 练习")],-1),Yn={href:"https://zh.practice.rs/compound-types/struct.html",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/struct.md",target:"_blank",rel:"noopener noreferrer"},$n={id:"枚举",tabindex:"-1"},ns=n("a",{class:"header-anchor",href:"#枚举","aria-hidden":"true"},"#",-1),ss={href:"https://course.rs/basic/compound-type/enum.html#%E6%9E%9A%E4%B8%BE",target:"_blank",rel:"noopener noreferrer"},as=n("h4",{id:"练习-8",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#练习-8","aria-hidden":"true"},"#"),s(" 练习")],-1),ts={href:"https://zh.practice.rs/compound-types/enum.html",target:"_blank",rel:"noopener noreferrer"},es={href:"https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/enum.md",target:"_blank",rel:"noopener noreferrer"},ps=e('<h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h3><h4 id="含义" tabindex="-1"><a class="header-anchor" href="#含义" aria-hidden="true">#</a> 含义</h4><ul><li><p>长度固定</p></li><li><p>元素必须有相同的类型</p></li><li><p>依次线性排列</p></li><li><p><strong>我们这里说的数组是 Rust 的基本类型，是固定长度的，这点与其他编程语言不同，其它编程语言的数组往往是可变长度的，与 Rust 中的动态数组 <code>Vector</code> 类似</strong></p></li></ul>',3),os={id:"数组切片",tabindex:"-1"},cs=n("a",{class:"header-anchor",href:"#数组切片","aria-hidden":"true"},"#",-1),is={href:"https://course.rs/basic/compound-type/array.html#%E6%95%B0%E7%BB%84%E5%88%87%E7%89%87",target:"_blank",rel:"noopener noreferrer"},ls=e(`<h4 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h4><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 编译器自动推导出one的类型</span>
  <span class="token keyword">let</span> one             <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 显式类型标注</span>
  <span class="token keyword">let</span> two<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">]</span>    <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> blank1          <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> blank2<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">// arrays是一个二维数组，其中每一个元素都是一个数组，元素类型是[u8; 3]</span>
  <span class="token keyword">let</span> arrays<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token number">4</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">[</span>one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> blank1<span class="token punctuation">,</span> blank2<span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">// 借用arrays的元素用作循环中</span>
  <span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token operator">&amp;</span>arrays <span class="token punctuation">{</span>
    <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}: &quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将a变成一个迭代器，用于循环</span>
    <span class="token comment">// 你也可以直接用for n in a {}来进行循环</span>
    <span class="token keyword">for</span> n <span class="token keyword">in</span> a<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;\\t{} + 10 = {}&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 0..a.len,是一个 Rust 的语法糖，其实就等于一个数组，元素是从0,1,2一直增加到到a.len-1</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>a<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      sum <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;\\t({:?} = {})&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>数组类型容易跟数组切片混淆</strong>，[T;n]描述了一个数组的类型，而[T]描述了切片的类型， 因为切片是运行期的数据结构，它的长度无法在编译期得知，因此不能用[T;n]的形式去描述</li><li><code>[u8; 3]</code>和<code>[u8; 4]</code>是不同的类型，数组的长度也是类型的一部分</li><li><strong>在实际开发中，使用最多的是数组切片[T]</strong>，我们往往通过引用的方式去使用<code>&amp;[T]</code>，因为后者有固定的类型大小</li></ul><h4 id="练习-9" tabindex="-1"><a class="header-anchor" href="#练习-9" aria-hidden="true">#</a> 练习</h4>`,4),us={href:"https://zh.practice.rs/compound-types/array.html",target:"_blank",rel:"noopener noreferrer"},rs={href:"https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/array.md",target:"_blank",rel:"noopener noreferrer"},ds=n("h2",{id:"源文章",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#源文章","aria-hidden":"true"},"#"),s(" 源文章")],-1),ks={href:"https://course.rs/about-book.html",target:"_blank",rel:"noopener noreferrer"};function ms(hs,vs){const a=o("ExternalLinkIcon");return c(),i("div",null,[r,l(" more "),d,k,n("ul",null,[n("li",null,[n("a",m,[s("Rust 命名规范"),t(a)])])]),h,n("ul",null,[n("li",null,[n("a",v,[s("Rust By Practice"),t(a)]),s("，支持代码在线编辑和运行，并提供详细的"),n("a",b,[s("习题解答"),t(a)]),s("。")])]),f,n("ul",null,[n("li",null,[n("a",g,[s("Rust By Practice"),t(a)]),s("，支持代码在线编辑和运行，并提供详细的"),n("a",_,[s("习题解答"),t(a)]),s("。")])]),y,n("p",null,[n("a",x,[s("Rust By Practice"),t(a)]),s("，支持代码在线编辑和运行，并提供详细的"),n("a",w,[s("习题解答"),t(a)]),s("。")]),q,n("ul",null,[n("li",null,[n("a",E,[s("Rust By Practice"),t(a)]),s("，支持代码在线编辑和运行，并提供详细的"),n("a",B,[s("习题解答"),t(a)]),s("。")])]),A,R,n("ul",null,[n("li",null,[s("函数名和变量名使用"),n("a",z,[s("蛇形命名法(snake case)"),t(a)]),s("，例如 "),S]),T,D]),C,n("ul",null,[P,n("li",null,[n("h5",F,[U,s(),n("a",I,[s("永不返回的发散函数 "),V,t(a)])]),N])]),L,n("ul",null,[n("li",null,[n("a",H,[s("Rust By Practice"),t(a)]),s("，支持代码在线编辑和运行，并提供详细的"),n("a",G,[s("习题解答"),t(a)]),s("。")])]),K,n("h4",M,[O,s(" 理清"),n("a",X,[s("栈(Stack)与堆(Heap)"),t(a)]),s("的关系")]),j,n("ul",null,[n("li",null,[n("a",J,[s("Rust By Practice"),t(a)]),s("，支持代码在线编辑和运行，并提供详细的"),n("a",Q,[s("习题解答"),t(a)]),s("。")])]),W,Y,n("h4",Z,[$,s(),n("a",nn,[s("引用与解引用"),t(a)])]),sn,n("ul",null,[n("li",null,[n("a",an,[s("Rust By Practice"),t(a)]),s("，支持代码在线编辑和运行，并提供详细的"),n("a",tn,[s("习题解答"),t(a)]),s("。")])]),en,n("h4",pn,[on,s(),n("a",cn,[s("String 与 &str 的转换"),t(a)])]),ln,n("h4",un,[rn,s(),n("a",dn,[s("字符串索引"),t(a)])]),kn,n("ul",null,[mn,n("li",null,[hn,n("ul",null,[n("li",null,[s("使用 "),vn,s(" 或者 "),bn,s(" 连接字符串，要求右边的参数必须为字符串的切片引用（Slice）类型。其实当调用 "),fn,s(" 的操作符时，相当于调用了 "),gn,s(" 标准库中的 "),n("a",_n,[yn,t(a)]),s(" 方法，这里 "),xn,s(" 方法的第二个参数是一个引用的类型。因此我们在使用 "),wn,s("， 必须传递切片引用类型。不能直接传递 "),qn,s(" 类型。"),En,s("。")])]),Bn])]),n("h4",An,[Rn,s(),n("a",zn,[s("字符串转义"),t(a)])]),n("h4",Sn,[Tn,s(),n("a",Dn,[s("操作 UTF-8 字符串"),t(a)])]),Cn,n("ul",null,[Pn,n("li",null,[n("p",null,[n("a",Fn,[s("字符串"),t(a)])]),n("ul",null,[n("li",null,[n("a",Un,[s("习题解答"),t(a)])])])]),n("li",null,[n("p",null,[n("a",In,[s("切片"),t(a)])]),n("ul",null,[n("li",null,[n("a",Vn,[s("习题解答"),t(a)])])])]),n("li",null,[n("p",null,[n("a",Nn,[s("String"),t(a)])]),n("ul",null,[n("li",null,[n("a",Ln,[s("习题解答"),t(a)])])])])]),Hn,n("h4",Gn,[Kn,s(),n("a",Mn,[s("结构体语法"),t(a)])]),On,n("h4",Xn,[jn,s(),n("a",Jn,[s("使用 "),Qn,s(" 来打印结构体的信息"),t(a)])]),Wn,n("ul",null,[n("li",null,[n("a",Yn,[s("Rust By Practice"),t(a)]),s("，支持代码在线编辑和运行，并提供详细的"),n("a",Zn,[s("习题解答"),t(a)]),s("。")])]),n("h3",$n,[ns,s(),n("a",ss,[s("枚举"),t(a)])]),as,n("ul",null,[n("li",null,[n("a",ts,[s("Rust By Practice"),t(a)]),s("，支持代码在线编辑和运行，并提供详细的"),n("a",es,[s("习题解答"),t(a)]),s("。")])]),ps,n("h4",os,[cs,s(),n("a",is,[s("数组切片"),t(a)])]),ls,n("ul",null,[n("li",null,[n("a",us,[s("Rust By Practice"),t(a)]),s("，支持代码在线编辑和运行，并提供详细的"),n("a",rs,[s("习题解答"),t(a)]),s("。")])]),ds,n("p",null,[n("a",ks,[s("Rust语言圣经(Rust Course)"),t(a)])])])}const gs=p(u,[["render",ms],["__file","rust_course_01.html.vue"]]);export{gs as default};

import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as l,f as i,b as n,e as s,a as e,d as t}from"./app-CArpxNNo.js";const r={},u=t('<h1 id="rust-语言圣经笔记-二" tabindex="-1"><a class="header-anchor" href="#rust-语言圣经笔记-二"><span>Rust 语言圣经笔记（二）</span></a></h1><h2 id="rust-基础入门" tabindex="-1"><a class="header-anchor" href="#rust-基础入门"><span>Rust 基础入门</span></a></h2><ul><li>主要部分： <ul><li>流程控制</li><li>模式匹配</li><li>方法和关联函数</li><li>泛型和特征</li><li>生命周期</li><li>返回值和错误处理</li><li>包和模块</li><li>注释和文档</li><li>格式化输出</li></ul></li></ul>',3),d=t('<h3 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制"><span>流程控制</span></a></h3><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h4><ul><li>break 可以单独使用，也可以带一个返回值，有些类似 return</li><li>loop 是一个表达式，因此可以返回一个值</li></ul><h4 id="练习" tabindex="-1"><a class="header-anchor" href="#练习"><span>练习</span></a></h4>',4),k={href:"https://zh.practice.rs/flow-control.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/sunface/rust-by-practice/blob/master/solutions/flow-control.md",target:"_blank",rel:"noopener noreferrer"},m=t(`<h3 id="match-和-if-let" tabindex="-1"><a class="header-anchor" href="#match-和-if-let"><span>match 和 if let</span></a></h3><h4 id="通用形式" tabindex="-1"><a class="header-anchor" href="#通用形式"><span>通用形式</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">match</span> target <span class="token punctuation">{</span>
    模式<span class="token number">1</span> <span class="token operator">=&gt;</span> 表达式<span class="token number">1</span><span class="token punctuation">,</span>
    模式<span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        语句<span class="token number">1</span><span class="token punctuation">;</span>
        语句<span class="token number">2</span><span class="token punctuation">;</span>
        表达式<span class="token number">2</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    _ <span class="token operator">=&gt;</span> 表达式<span class="token number">3</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>match</code> 的匹配必须穷尽所有情况</li></ul>`,4),v={id:"if-let-匹配",tabindex:"-1"},b={class:"header-anchor",href:"#if-let-匹配"},f={href:"https://course.rs/basic/match-pattern/match-if-let.html#if-let-%E5%8C%B9%E9%85%8D",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"if let",-1),g=n("ul",null,[n("li",null,[n("strong",null,[s("当你只要匹配一个条件，且忽略其他条件时就用 "),n("code",null,"if let"),s(" ，否则都用 "),n("code",null,"match")]),s("。")])],-1),y={id:"matches-宏",tabindex:"-1"},w={class:"header-anchor",href:"#matches-宏"},x={href:"https://course.rs/basic/match-pattern/match-if-let.html#matches%E5%AE%8F",target:"_blank",rel:"noopener noreferrer"},E=t(`<div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">MyEnum</span> <span class="token punctuation">{</span>
    <span class="token class-name">Foo</span><span class="token punctuation">,</span>
    <span class="token class-name">Bar</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token class-name">MyEnum</span><span class="token punctuation">::</span><span class="token class-name">Foo</span><span class="token punctuation">,</span><span class="token class-name">MyEnum</span><span class="token punctuation">::</span><span class="token class-name">Bar</span><span class="token punctuation">,</span><span class="token class-name">MyEnum</span><span class="token punctuation">::</span><span class="token class-name">Foo</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">matches!</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token class-name">MyEnum</span><span class="token punctuation">::</span><span class="token class-name">Foo</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token char">&#39;f&#39;</span><span class="token punctuation">;</span>
    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token macro property">matches!</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">..=</span><span class="token char">&#39;Z&#39;</span> <span class="token operator">|</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">..=</span><span class="token char">&#39;z&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token macro property">matches!</span><span class="token punctuation">(</span>bar<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),B={id:"变量遮蔽",tabindex:"-1"},R={class:"header-anchor",href:"#变量遮蔽"},z={href:"https://course.rs/basic/match-pattern/match-if-let.html#%E5%8F%98%E9%87%8F%E9%81%AE%E8%94%BD",target:"_blank",rel:"noopener noreferrer"},A=n("h4",{id:"练习-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#练习-1"},[n("span",null,"练习")])],-1),C={href:"https://zh.practice.rs/pattern-match/match-iflet.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/sunface/rust-by-practice/blob/master/solutions/pattern-match/match.md",target:"_blank",rel:"noopener noreferrer"},T=t(`<h3 id="解构-option" tabindex="-1"><a class="header-anchor" href="#解构-option"><span>解构 Option</span></a></h3><h4 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">None</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>：<strong>一个变量要么有值：<code>Some(T)</code>, 要么为空：<code>None</code></strong>。</li></ul><h3 id="方法-method" tabindex="-1"><a class="header-anchor" href="#方法-method"><span>方法 Method</span></a></h3><h4 id="定义-1" tabindex="-1"><a class="header-anchor" href="#定义-1"><span>定义</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">Circle</span> <span class="token punctuation">{</span>
    x<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span>
    y<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span>
    radius<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>
    <span class="token comment">// new是Circle的关联函数，因为它的第一个参数不是self，且new并不是关键字</span>
    <span class="token comment">// 这种方法往往用于初始化当前结构体的实例</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>
        <span class="token class-name">Circle</span> <span class="token punctuation">{</span>
            x<span class="token punctuation">:</span> x<span class="token punctuation">,</span>
            y<span class="token punctuation">:</span> y<span class="token punctuation">,</span>
            radius<span class="token punctuation">:</span> radius<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Circle的方法，&amp;self表示借用当前的Circle结构体</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">f64</span> <span class="token punctuation">{</span>
        <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">f64</span><span class="token punctuation">::</span><span class="token namespace">consts<span class="token punctuation">::</span></span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>radius <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>radius<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),q={id:"关联函数",tabindex:"-1"},M={class:"header-anchor",href:"#关联函数"},P={href:"https://course.rs/basic/method.html#%E5%85%B3%E8%81%94%E5%87%BD%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},V=t(`<p>现在大家可以思考一个问题，如何为一个结构体定义一个构造器方法？也就是接受几个参数，然后构造并返回该结构体的实例。其实答案在开头的代码片段中就给出了，很简单，参数中不包含 <code>self</code> 即可。</p><p>这种定义在 <code>impl</code> 中且没有 <code>self</code> 的函数被称之为<strong>关联函数</strong>： 因为它没有 <code>self</code>，不能用 <code>f.read()</code> 的形式调用，因此它是一个函数而不是方法，它又在 <code>impl</code> 中，与结构体紧密关联，因此称为关联函数。</p><p>在之前的代码中，我们已经多次使用过关联函数，例如 <code>String::from</code>，用于创建一个动态字符串。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>w<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> h<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
        <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span> width<span class="token punctuation">:</span> w<span class="token punctuation">,</span> height<span class="token punctuation">:</span> h <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),D={id:"多个-impl-定义",tabindex:"-1"},N={class:"header-anchor",href:"#多个-impl-定义"},F={href:"https://course.rs/basic/method.html#%E5%A4%9A%E4%B8%AA-impl-%E5%AE%9A%E4%B9%89",target:"_blank",rel:"noopener noreferrer"},H=t(`<div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>height
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">can_hold</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Rectangle</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">&gt;</span> other<span class="token punctuation">.</span>width <span class="token operator">&amp;&amp;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>height <span class="token operator">&gt;</span> other<span class="token punctuation">.</span>height
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="练习-2" tabindex="-1"><a class="header-anchor" href="#练习-2"><span>练习</span></a></h4>`,2),Z={href:"https://zh.practice.rs/method.html",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/sunface/rust-by-practice/blob/master/solutions/method.md",target:"_blank",rel:"noopener noreferrer"},J=n("h3",{id:"泛型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#泛型"},[n("span",null,"泛型")])],-1),j={id:"const-泛型-rust-1-51-版本引入的重要特性",tabindex:"-1"},I={class:"header-anchor",href:"#const-泛型-rust-1-51-版本引入的重要特性"},U={href:"https://course.rs/basic/trait/generic.html#const-%E6%B3%9B%E5%9E%8Brust-151-%E7%89%88%E6%9C%AC%E5%BC%95%E5%85%A5%E7%9A%84%E9%87%8D%E8%A6%81%E7%89%B9%E6%80%A7",target:"_blank",rel:"noopener noreferrer"},W=n("h4",{id:"练习-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#练习-3"},[n("span",null,"练习")])],-1),K=n("p",null,"Rust By Practice，支持代码在线编辑和运行，并提供详细的习题解答。",-1),L={href:"https://zh.practice.rs/generics-traits/generics.html",target:"_blank",rel:"noopener noreferrer"},G={href:"https://github.com/sunface/rust-by-practice/blob/master/solutions/generics-traits/generics.md",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://zh.practice.rs/generics-traits/const-generics.html",target:"_blank",rel:"noopener noreferrer"},X={href:"https://github.com/sunface/rust-by-practice/blob/master/solutions/generics-traits/const-generics.md",target:"_blank",rel:"noopener noreferrer"},Y=t(`<h3 id="特征" tabindex="-1"><a class="header-anchor" href="#特征"><span>特征</span></a></h3><h4 id="定义-2" tabindex="-1"><a class="header-anchor" href="#定义-2"><span>定义</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">Summary</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Post</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token comment">// 标题</span>
    <span class="token keyword">pub</span> author<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token comment">// 作者</span>
    <span class="token keyword">pub</span> content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token comment">// 内容</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Summary</span> <span class="token keyword">for</span> <span class="token class-name">Post</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
        <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;文章{}, 作者是{}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>author<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Weibo</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> content<span class="token punctuation">:</span> <span class="token class-name">String</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">Summary</span> <span class="token keyword">for</span> <span class="token class-name">Weibo</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
        <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;{}发表了微博{}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>username<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),$=t("<li><p><strong>如果你想要为类型</strong> <code>A</code> <strong>实现特征</strong> <code>T</code><strong>，那么</strong> <code>A</code> <strong>或者</strong> <code>T</code> <strong>至少有一个是在当前作用域中定义的！</strong></p></li><li><p><strong>可以有默认实现</strong></p></li>",2),nn=t(`<p>使用特征作为函数参数</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">impl</span> <span class="token class-name">Summary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Breaking news! {}&quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="特征约束" tabindex="-1"><a class="header-anchor" href="#特征约束"><span>特征约束</span></a></h4>`,3),sn=t(`<li><p>多重约束</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">impl</span> <span class="token class-name">Summary</span> <span class="token operator">+</span> <span class="token class-name">Display</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Summary</span> <span class="token operator">+</span> <span class="token class-name">Display</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),an=t(`<p>Where 约束</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">some_function</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">,</span> u<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">U</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span>
    <span class="token keyword">where</span> <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Display</span> <span class="token operator">+</span> <span class="token class-name">Clone</span><span class="token punctuation">,</span>
          <span class="token class-name">U</span><span class="token punctuation">:</span> <span class="token class-name">Clone</span> <span class="token operator">+</span> <span class="token class-name">Debug</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="练习-4" tabindex="-1"><a class="header-anchor" href="#练习-4"><span>练习</span></a></h4>`,3),en={href:"https://zh.practice.rs/generics-traits/traits.html",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://github.com/sunface/rust-by-practice/blob/master/solutions/generics-traits/traits.md",target:"_blank",rel:"noopener noreferrer"},on=n("h3",{id:"特征对象",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#特征对象"},[n("span",null,"特征对象")])],-1),pn=n("h4",{id:"练习-5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#练习-5"},[n("span",null,"练习")])],-1),cn={href:"https://zh.practice.rs/generics-traits/traits.html",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://github.com/sunface/rust-by-practice/blob/master/solutions/generics-traits/traits.md",target:"_blank",rel:"noopener noreferrer"},rn=t('<h3 id="动态数组-vector" tabindex="-1"><a class="header-anchor" href="#动态数组-vector"><span>动态数组 Vector</span></a></h3><h4 id="创建" tabindex="-1"><a class="header-anchor" href="#创建"><span>创建</span></a></h4><ul><li>Vec::new</li><li>vec![]</li></ul><h4 id="更新" tabindex="-1"><a class="header-anchor" href="#更新"><span>更新</span></a></h4><ul><li>x.push(1);</li></ul><h4 id="读取" tabindex="-1"><a class="header-anchor" href="#读取"><span>读取</span></a></h4><ul><li>通过下标索引访问。</li><li>使用 <code>get</code> 方法。 <ul><li>和其它语言一样，集合类型的索引下标都是从 <code>0</code> 开始，<code>&amp;v[2]</code> 表示借用 <code>v</code> 中的第三个元素，最终会获得该元素的引用。而 <code>v.get(2)</code> 也是访问第三个元素，但是有所不同的是，它返回了 <code>Option&lt;&amp;T&gt;</code>，因此还需要额外的 <code>match</code> 来匹配解构出具体的值。</li></ul></li></ul><h4 id="存储不同元素" tabindex="-1"><a class="header-anchor" href="#存储不同元素"><span>存储不同元素</span></a></h4><ul><li>枚举或者特征对象 <ul><li><strong>特征对象数组要比枚举数组常见很多</strong></li></ul></li></ul>',9),un={id:"vector-常用方法",tabindex:"-1"},dn={class:"header-anchor",href:"#vector-常用方法"},kn={href:"https://course.rs/basic/collections/vector.html#vector-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},hn={id:"vector-的排序",tabindex:"-1"},mn={class:"header-anchor",href:"#vector-的排序"},vn={href:"https://course.rs/basic/collections/vector.html#vector-%E7%9A%84%E6%8E%92%E5%BA%8F",target:"_blank",rel:"noopener noreferrer"},bn=n("h4",{id:"练习-6",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#练习-6"},[n("span",null,"练习")])],-1),fn={href:"https://zh.practice.rs/collections/vector.html",target:"_blank",rel:"noopener noreferrer"},_n={href:"https://github.com/sunface/rust-by-practice/blob/master/solutions/collections/Vector.md",target:"_blank",rel:"noopener noreferrer"},gn=t(`<h3 id="kv-存储-hashmap" tabindex="-1"><a class="header-anchor" href="#kv-存储-hashmap"><span>KV 存储 HashMap</span></a></h3><h4 id="创建-1" tabindex="-1"><a class="header-anchor" href="#创建-1"><span>创建</span></a></h4><ul><li><p>跟创建动态数组 <code>Vec</code> 的方法类似，可以使用 <code>new</code> 方法来创建 <code>HashMap</code>，然后通过 <code>insert</code> 方法插入键值对。</p></li><li><p>使用迭代器和 collect 方法创建</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> teams_list <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>
        <span class="token punctuation">(</span><span class="token string">&quot;中国队&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token string">&quot;美国队&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token string">&quot;日本队&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> teams_map<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>_<span class="token punctuation">,</span>_<span class="token operator">&gt;</span> <span class="token operator">=</span> teams_list<span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span>teams_map<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="查询" tabindex="-1"><a class="header-anchor" href="#查询"><span>查询</span></a></h4><ul><li><code>get</code> 方法返回一个 <code>Option&lt;&amp;i32&gt;</code> 类型：当查询不到时，会返回一个 <code>None</code>，查询到时返回 <code>Some(&amp;i32)</code></li><li><code>&amp;i32</code> 是对 <code>HashMap</code> 中值的借用，如果不使用借用，可能会发生所有权的转移</li></ul>`,5),yn={id:"更新-hashmap-中的值",tabindex:"-1"},wn={class:"header-anchor",href:"#更新-hashmap-中的值"},xn={href:"https://course.rs/basic/collections/hashmap.html#%E6%9B%B4%E6%96%B0-hashmap-%E4%B8%AD%E7%9A%84%E5%80%BC",target:"_blank",rel:"noopener noreferrer"},En=n("h4",{id:"练习-7",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#练习-7"},[n("span",null,"练习")])],-1),Bn={href:"https://zh.practice.rs/collections/hashmap.html",target:"_blank",rel:"noopener noreferrer"},Rn={href:"https://github.com/sunface/rust-by-practice/blob/master/solutions/collections/Hashmap.md",target:"_blank",rel:"noopener noreferrer"},zn=t('<h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h3><h4 id="消除规则" tabindex="-1"><a class="header-anchor" href="#消除规则"><span>消除规则</span></a></h4><ul><li><strong>每一个引用参数都会获得独自的生命周期</strong></li><li><strong>若只有一个输入生命周期(函数参数中只有一个引用类型)，那么该生命周期会被赋给所有的输出生命周期</strong></li><li><strong>若存在多个输入生命周期，且其中一个是 <code>&amp;self</code> 或 <code>&amp;mut self</code>，则 <code>&amp;self</code> 的生命周期被赋给所有的输出生命周期</strong></li></ul><h4 id="静态生命周期" tabindex="-1"><a class="header-anchor" href="#静态生命周期"><span>静态生命周期</span></a></h4><ul><li>&#39;static</li></ul>',5),An={id:"返回值和错误处理",tabindex:"-1"},Cn={class:"header-anchor",href:"#返回值和错误处理"},Sn={href:"https://course.rs/basic/result-error/intro.html",target:"_blank",rel:"noopener noreferrer"},Tn={id:"包和模块",tabindex:"-1"},qn={class:"header-anchor",href:"#包和模块"},Mn={href:"https://course.rs/basic/crate-module/intro.html",target:"_blank",rel:"noopener noreferrer"},Pn={id:"注释和文档",tabindex:"-1"},Vn={class:"header-anchor",href:"#注释和文档"},Dn={href:"https://course.rs/basic/comment.html",target:"_blank",rel:"noopener noreferrer"},Nn={id:"格式化输出",tabindex:"-1"},Fn={class:"header-anchor",href:"#格式化输出"},Hn={href:"https://course.rs/basic/formatted-output.html",target:"_blank",rel:"noopener noreferrer"},Zn=n("h2",{id:"源文章",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#源文章"},[n("span",null,"源文章")])],-1),On={href:"https://course.rs/about-book.html",target:"_blank",rel:"noopener noreferrer"};function Jn(jn,In){const a=p("ExternalLinkIcon");return c(),l("div",null,[u,i(" more "),d,n("ul",null,[n("li",null,[n("a",k,[s("Rust By Practice"),e(a)]),s("，支持代码在线编辑和运行，并提供详细的"),n("a",h,[s("习题解答"),e(a)]),s("。")])]),m,n("h4",v,[n("a",b,[n("span",null,[n("a",f,[_,s(" 匹配"),e(a)])])])]),g,n("h4",y,[n("a",w,[n("span",null,[n("a",x,[s("matches!宏"),e(a)])])])]),E,n("h4",B,[n("a",R,[n("span",null,[n("a",z,[s("变量遮蔽"),e(a)])])])]),A,n("ul",null,[n("li",null,[n("a",C,[s("Rust By Practice"),e(a)]),s("，支持代码在线编辑和运行，并提供详细的"),n("a",S,[s("习题解答"),e(a)]),s("。")])]),T,n("h4",q,[n("a",M,[n("span",null,[n("a",P,[s("关联函数"),e(a)])])])]),V,n("h4",D,[n("a",N,[n("span",null,[n("a",F,[s("多个 impl 定义"),e(a)])])])]),H,n("ul",null,[n("li",null,[n("a",Z,[s("Rust By Practice"),e(a)]),s("，支持代码在线编辑和运行，并提供详细的"),n("a",O,[s("习题解答"),e(a)]),s("。")])]),J,n("h4",j,[n("a",I,[n("span",null,[n("a",U,[s("const 泛型（Rust 1.51 版本引入的重要特性）"),e(a)])])])]),W,K,n("ul",null,[n("li",null,[n("a",L,[s("泛型"),e(a)]),n("ul",null,[n("li",null,[n("a",G,[s("习题解答"),e(a)])])])]),n("li",null,[n("a",Q,[s("const 泛型"),e(a)]),n("ul",null,[n("li",null,[n("a",X,[s("习题解答"),e(a)])])])])]),Y,n("ul",null,[$,n("li",null,[nn,n("ul",null,[sn,n("li",null,[an,n("ul",null,[n("li",null,[n("a",en,[s("Rust By Practice"),e(a)]),s("，支持代码在线编辑和运行，并提供详细的"),n("a",tn,[s("习题解答"),e(a)]),s("。")])])])]),on,pn,n("ul",null,[n("li",null,[n("a",cn,[s("Rust By Practice"),e(a)]),s("，支持代码在线编辑和运行，并提供详细的"),n("a",ln,[s("习题解答"),e(a)]),s("。")])])])]),rn,n("h4",un,[n("a",dn,[n("span",null,[n("a",kn,[s("Vector 常用方法"),e(a)])])])]),n("h4",hn,[n("a",mn,[n("span",null,[n("a",vn,[s("Vector 的排序"),e(a)])])])]),bn,n("ul",null,[n("li",null,[n("a",fn,[s("Rust By Practice"),e(a)]),s("，支持代码在线编辑和运行，并提供详细的"),n("a",_n,[s("习题解答"),e(a)]),s("。")])]),gn,n("h4",yn,[n("a",wn,[n("span",null,[n("a",xn,[s("更新 HashMap 中的值"),e(a)])])])]),En,n("ul",null,[n("li",null,[n("a",Bn,[s("Rust By Practice"),e(a)]),s("，支持代码在线编辑和运行，并提供详细的"),n("a",Rn,[s("习题解答"),e(a)]),s("。")])]),zn,n("h3",An,[n("a",Cn,[n("span",null,[n("a",Sn,[s("返回值和错误处理"),e(a)])])])]),n("h3",Tn,[n("a",qn,[n("span",null,[n("a",Mn,[s("包和模块"),e(a)])])])]),n("h3",Pn,[n("a",Vn,[n("span",null,[n("a",Dn,[s("注释和文档"),e(a)])])])]),n("h3",Nn,[n("a",Fn,[n("span",null,[n("a",Hn,[s("格式化输出"),e(a)])])])]),Zn,n("p",null,[n("a",On,[s("Rust语言圣经(Rust Course)"),e(a)])])])}const Kn=o(r,[["render",Jn],["__file","rust_course_02.html.vue"]]),Ln=JSON.parse('{"path":"/posts/coding-related/rust/rust_course_02.html","title":"Rust 语言圣经笔记（二）","lang":"zh-CN","frontmatter":{"title":"Rust 语言圣经笔记（二）","icon":"code","date":"2024-01-04T00:00:00.000Z","category":["编程"],"tag":["Rust"],"description":"Rust 基础入门 主要部分： 流程控制 模式匹配 方法和关联函数 泛型和特征 生命周期 返回值和错误处理 包和模块 注释和文档 格式化输出","head":[["meta",{"property":"og:url","content":"https://zjiac.github.io/tech-arch-doc/tech-arch-doc/posts/coding-related/rust/rust_course_02.html"}],["meta",{"property":"og:site_name","content":"zJiac 个人知识体系"}],["meta",{"property":"og:title","content":"Rust 语言圣经笔记（二）"}],["meta",{"property":"og:description","content":"Rust 基础入门 主要部分： 流程控制 模式匹配 方法和关联函数 泛型和特征 生命周期 返回值和错误处理 包和模块 注释和文档 格式化输出"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-04T12:00:15.000Z"}],["meta",{"property":"article:author","content":"zJiaC"}],["meta",{"property":"article:tag","content":"Rust"}],["meta",{"property":"article:published_time","content":"2024-01-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-04T12:00:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust 语言圣经笔记（二）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-04T12:00:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zJiaC\\",\\"url\\":\\"https://zjiac.github.io/tech-arch-doc/\\"}]}"]]},"headers":[{"level":2,"title":"Rust 基础入门","slug":"rust-基础入门","link":"#rust-基础入门","children":[{"level":3,"title":"流程控制","slug":"流程控制","link":"#流程控制","children":[]},{"level":3,"title":"match 和 if let","slug":"match-和-if-let","link":"#match-和-if-let","children":[]},{"level":3,"title":"解构 Option","slug":"解构-option","link":"#解构-option","children":[]},{"level":3,"title":"方法 Method","slug":"方法-method","link":"#方法-method","children":[]},{"level":3,"title":"泛型","slug":"泛型","link":"#泛型","children":[]},{"level":3,"title":"特征","slug":"特征","link":"#特征","children":[]},{"level":3,"title":"动态数组 Vector","slug":"动态数组-vector","link":"#动态数组-vector","children":[]},{"level":3,"title":"KV 存储 HashMap","slug":"kv-存储-hashmap","link":"#kv-存储-hashmap","children":[]},{"level":3,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[]},{"level":3,"title":"返回值和错误处理","slug":"返回值和错误处理","link":"#返回值和错误处理","children":[]},{"level":3,"title":"包和模块","slug":"包和模块","link":"#包和模块","children":[]},{"level":3,"title":"注释和文档","slug":"注释和文档","link":"#注释和文档","children":[]},{"level":3,"title":"格式化输出","slug":"格式化输出","link":"#格式化输出","children":[]}]},{"level":2,"title":"源文章","slug":"源文章","link":"#源文章","children":[]}],"git":{"createdTime":1704355447000,"updatedTime":1704369615000,"contributors":[{"name":"zJiaC","email":"425226133@qq.com","commits":2}]},"readingTime":{"minutes":5.57,"words":1671},"filePathRelative":"posts/coding-related/rust/rust_course_02.md","localizedDate":"2024年1月4日","excerpt":"\\n<h2>Rust 基础入门</h2>\\n<ul>\\n<li>主要部分：\\n<ul>\\n<li>流程控制</li>\\n<li>模式匹配</li>\\n<li>方法和关联函数</li>\\n<li>泛型和特征</li>\\n<li>生命周期</li>\\n<li>返回值和错误处理</li>\\n<li>包和模块</li>\\n<li>注释和文档</li>\\n<li>格式化输出</li>\\n</ul>\\n</li>\\n</ul>\\n","autoDesc":true}');export{Kn as comp,Ln as data};

import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as s,f as e,d as t,o as l}from"./app-X9Qm7P3-.js";const p={};function r(h,i){return l(),n("div",null,[i[0]||(i[0]=s("h1",{id:"spring-知识查缺补漏",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#spring-知识查缺补漏"},[s("span",null,"Spring 知识查缺补漏")])],-1)),e(" more "),i[1]||(i[1]=t(`<h2 id="ioc" tabindex="-1"><a class="header-anchor" href="#ioc"><span>IOC</span></a></h2><ul><li><p>Inversion of Control（“控制反转”）<br><img src="https://image.itbaima.cn/markdown/2022/11/22/sjLiFokU1f3CvH5.png" alt=""></p></li><li><p>作用域</p><ul><li>singleton</li><li>prototype</li></ul></li><li><p>依赖注入</p><ul><li>Setter依赖注入：通过成员属性对应的set方法完成注入。</li><li>构造方法依赖注入：通过构造方法完成注入。</li><li>自动装配</li></ul></li><li><p>生命周期与继承</p><ul><li>如果Bean不是单例模式，而是采用的原型模式，那么就只会在获取时才创建，并调用init-method，而对应的销毁方法不会被调用（因此，对于原型模式下的Bean，Spring无法顾及其完整生命周期，而在单例模式下，Spring能够从Bean对象的创建一直管理到对象的销毁）</li><li>Bean之间也是具备继承关系的，只不过这里的继承并不是类的继承，而是属性的继承</li></ul></li><li><p>工厂Bean</p><ul><li>Mybatis 使用工厂 Bean 管理自己扫描的 Bean</li></ul></li><li><p>注解</p><ul><li>@Resource默认ByName如果找不到则ByType，可以添加到set方法、字段上。</li><li>@Autowired默认是byType，只会根据类型寻找，可以添加在构造方法、set方法、字段、方法参数上。</li></ul></li></ul><p>因为@Resource的匹配机制更加合理高效，因此官方并不推荐使用@Autowired字段注入，当然，实际上Spring官方更推荐我们使用基于构造方法或是Setter的@Autowired注入，比如Setter 注入的一个好处是，Setter 方法使该类的对象能够在以后重新配置或重新注入。其实，最后使用哪个注解，还是看你自己，要是有强迫症不能忍受黄标但是又实在想用字段注入，那就用@Resource注解。</p><h2 id="spring-高级特性" tabindex="-1"><a class="header-anchor" href="#spring-高级特性"><span>Spring 高级特性</span></a></h2><ul><li><p>Bean Aware（感知）</p><table><thead><tr><th>Aware子接口</th><th>描述</th></tr></thead><tbody><tr><td>BeanNameAware</td><td>获取容器中 Bean 的名称</td></tr><tr><td>BeanFactoryAware</td><td>获取当前 BeanFactory ，这样可以调用容器的服务</td></tr><tr><td>ApplicationContextAware</td><td>同上，在<a href="https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FYVl20QqUHTXMubr68wXR1A" target="_blank" rel="noopener noreferrer">BeanFactory 和 ApplicationContext 的区别</a> 中已明确说明</td></tr><tr><td>MessageSourceAware</td><td>获取 Message Source 相关文本信息</td></tr><tr><td>ApplicationEventPublisherAware</td><td>发布事件</td></tr><tr><td>ResourceLoaderAware</td><td>获取资源加载器，这样获取外部资源文件</td></tr></tbody></table></li><li><p>异步任务</p><ul><li><p>@EnableAsync</p></li><li><p>@Async</p></li><li><p>@Import</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Target</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">({</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ElementType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">TYPE</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">})</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Retention</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RetentionPolicy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RUNTIME</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Documented</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Import</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">({</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">AspectJAutoProxyRegistrar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">})</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> EnableAspectJAutoProxy</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> proxyTargetClass</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> exposeProxy</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AspectJAutoProxyRegistrar</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ImportBeanDefinitionRegistrar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    AspectJAutoProxyRegistrar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> registerBeanDefinitions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">AnnotationMetadata</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> importingClassMetadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BeanDefinitionRegistry</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> registry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      	//注册AnnotationAwareAspectJAutoProxyCreator到容器中</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        AopConfigUtils</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(registry);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        AnnotationAttributes</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> enableAspectJAutoProxy</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> AnnotationConfigUtils</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">attributesFor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(importingClassMetadata, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">EnableAspectJAutoProxy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (enableAspectJAutoProxy </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">enableAspectJAutoProxy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getBoolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;proxyTargetClass&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                AopConfigUtils</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forceAutoProxyCreatorToUseClassProxying</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(registry);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">enableAspectJAutoProxy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getBoolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;exposeProxy&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                AopConfigUtils</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forceAutoProxyCreatorToExposeProxy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(registry);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>它实现了接口，这个接口也是Spring提供的一种Bean加载机制，它支持直接向容器中添加Bean定义，容器也会加载这个Bean：</li><li>ImportBeanDefinitionRegistrar类只能通过其他类@Import的方式来加载，通常是启动类或配置类。</li><li>使用@Import，如果括号中的类是ImportBeanDefinitionRegistrar的实现类，则会调用接口中方法（一般用于注册Bean）</li><li>实现该接口的类拥有注册bean的能力。</li></ul></li></ul></li><li><p>Spring 事件监听器</p></li></ul><h2 id="springel-表达式" tabindex="-1"><a class="header-anchor" href="#springel-表达式"><span>SpringEL 表达式</span></a></h2><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions-language-ref" target="_blank" rel="noopener noreferrer">文档</a></p><h2 id="aop" tabindex="-1"><a class="header-anchor" href="#aop"><span>AOP</span></a></h2><ul><li>通知（Advice）: AOP 框架中的增强处理，通知描述了切面何时执行以及如何执行增强处理，也就是我们上面编写的方法实现。</li><li>连接点（join point）: 连接点表示应用执行过程中能够插入切面的一个点，这个点可以是方法的调用、异常的抛出，实际上就是我们在方法执行前或是执行后需要做的内容。</li><li>切点（PointCut）: 可以插入增强处理的连接点，可以是方法执行之前也可以方法执行之后，还可以是抛出异常之类的。</li><li>切面（Aspect）: 切面是通知和切点的结合，我们之前在xml中定义的就是切面，包括很多信息。</li><li>引入（Introduction）：引入允许我们向现有的类添加新的方法或者属性。</li><li>织入（Weaving）: 将增强处理添加到目标对象中，并创建一个被增强的对象，我们之前都是在将我们的增强处理添加到目标对象，也就是织入（这名字挺有文艺范的）</li></ul><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务"><span>事务</span></a></h2><p><img src="https://image.itbaima.cn/markdown/2022/12/17/C1RA4mBEoxNDFGl.png" alt=""></p><h2 id="bean-工厂与-bean-定义" tabindex="-1"><a class="header-anchor" href="#bean-工厂与-bean-定义"><span>Bean 工厂与 Bean 定义</span></a></h2><p><img src="https://image.itbaima.cn/markdown/2022/12/17/Un6qjPci2uvkL5X.png" alt=""></p><ul><li>三级缓存避免循环依赖 <ul><li>singletonObjects，用于保存实例化、注入、初始化完成的 bean 实例</li><li>earlySingletonObjects，用于保存实例化完成的 bean 实例</li><li>singletonFactories，在初始创建Bean对象时都会生成一个对应的单例工厂用于获取早期对象</li></ul></li></ul><p><img src="https://image.itbaima.cn/markdown/2022/12/18/xFfUuaozLpiVg96.png" alt=""></p><ul><li>[Bean定义]首先扫描Bean，加载Bean定义 -&gt; <strong>[Bean定义]Bean定义和Bean工厂后置处理</strong> -&gt; [依赖注入]根据Bean定义通过反射创建Bean实例 -&gt; [依赖注入]进行依赖注入（顺便解决循环依赖问题）-&gt; [初始化Bean]BeanPostProcessor的初始化之前方法 -&gt; [初始化Bean]Bean初始化方法 -&gt; [初始化Bean]BeanPostProcessor的初始化之前后方法 -&gt; [完成]最终得到的Bean加载完成的实例</li></ul><h2 id="bean-生命周期" tabindex="-1"><a class="header-anchor" href="#bean-生命周期"><span>Bean 生命周期</span></a></h2><ul><li>实例化-属性赋值-初始化-使用-销毁</li></ul><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/spring-595fce5b-36cb-4dcb-b08c-8205a1e98d8a.png" alt=""></p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/spring-942a927a-86e4-4a01-8f52-9addd89642ff.png" alt=""></p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/spring-a3b7714e-38f2-433d-97c6-acb1d20f2887.png" alt=""></p><h2 id="springboot-启动原理" tabindex="-1"><a class="header-anchor" href="#springboot-启动原理"><span>SpringBoot 启动原理</span></a></h2><ul><li>服务构建-环境准备-容器创建-填充容器</li></ul><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/spring-68744556-a1ba-4e1f-a092-1582875f0da6.png" alt=""></p>`,24))])}const o=a(p,[["render",r]]),g=JSON.parse('{"path":"/posts/coding-related/spring/spring.html","title":"Spring 知识查缺补漏","lang":"zh-CN","frontmatter":{"title":"Spring 知识查缺补漏","icon":"fa-brands fa-java","date":"2024-01-12T00:00:00.000Z","category":["编程"],"tag":["Spring"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring 知识查缺补漏\\",\\"image\\":[\\"https://image.itbaima.cn/markdown/2022/11/22/sjLiFokU1f3CvH5.png\\",\\"https://image.itbaima.cn/markdown/2022/12/17/C1RA4mBEoxNDFGl.png\\",\\"https://image.itbaima.cn/markdown/2022/12/17/Un6qjPci2uvkL5X.png\\",\\"https://image.itbaima.cn/markdown/2022/12/18/xFfUuaozLpiVg96.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/spring-595fce5b-36cb-4dcb-b08c-8205a1e98d8a.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/spring-942a927a-86e4-4a01-8f52-9addd89642ff.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/spring-a3b7714e-38f2-433d-97c6-acb1d20f2887.png\\",\\"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/spring-68744556-a1ba-4e1f-a092-1582875f0da6.png\\"],\\"datePublished\\":\\"2024-01-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-20T02:08:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zJiaC\\",\\"url\\":\\"https://zjiac.github.io/tech-arch-doc/\\"}]}"],["meta",{"property":"og:url","content":"https://zjiac.github.io/tech-arch-doc/tech-arch-doc/posts/coding-related/spring/spring.html"}],["meta",{"property":"og:site_name","content":"zJiac 个人知识体系"}],["meta",{"property":"og:title","content":"Spring 知识查缺补漏"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://image.itbaima.cn/markdown/2022/11/22/sjLiFokU1f3CvH5.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-20T02:08:45.000Z"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2024-01-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-20T02:08:45.000Z"}]]},"git":{"createdTime":1705066954000,"updatedTime":1713578925000,"contributors":[{"name":"zJiaC","username":"zJiaC","email":"425226133@qq.com","commits":5,"url":"https://github.com/zJiaC"}]},"readingTime":{"minutes":4.33,"words":1299},"filePathRelative":"posts/coding-related/spring/spring.md","excerpt":"\\n"}');export{o as comp,g as data};

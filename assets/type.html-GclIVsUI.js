import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as c,c as o,a as l,b as n,d as s,e as t,f as i}from"./app-1xQyYr35.js";const u={},k=n("h1",{id:"type-类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#type-类型","aria-hidden":"true"},"#"),s(" Type 类型")],-1),r=i(`<h2 id="type-接口简介" tabindex="-1"><a class="header-anchor" href="#type-接口简介" aria-hidden="true">#</a> Type 接口简介</h2><ul><li>Type 是 Java 语言中所有类型的公共父接口，其从 JDK5 开始引入，引入的目的主要是为了支持泛型。</li><li>没有泛型的之前，Java 只有所谓的原始类型(raw types)。此时，所有的原始类型都通过字节码类 Class 进行抽象。Class 类的一个具体对象(例如 String.class)就代表一个指定的原始类型。</li><li>泛型的出现扩充了数据类型的概念，从只有原始类型(raw types)扩充了参数化类型、类型变量类型、泛型数组类型和通配符类型。他们都是 Type 的子接口。</li></ul><h2 id="如何获取泛型的参数类型" tabindex="-1"><a class="header-anchor" href="#如何获取泛型的参数类型" aria-hidden="true">#</a> 如何获取泛型的参数类型？</h2><ul><li><p>java.lang.reflect.Type 是 Java 中所有类型的公共高级接口, 代表了 Java 中的所有类型. Type 体系中类型的包括：数组类型 (GenericArrayType)、参数化类型 (ParameterizedType)、类型变量 (TypeVariable)、通配符类型 (WildcardType)、原始类型 (Class)、基本类型 (Class), 以上这些类型都实现 Type 接口。</p></li><li><p>AOP 切片通过反射方式屏蔽限制值:</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ComponentScan</span>
<span class="token annotation punctuation">@EnableAspectJAutoProxy</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DisplayHandlerAspect</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Autowired</span>
  <span class="token keyword">private</span> <span class="token class-name">SecurityService</span> securityService<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;@annotation(com.*)&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//切入点</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * 对方法拦截后对字段显示进行判断
   *
   * <span class="token keyword">@param</span> <span class="token parameter">joinPoint</span>
   * <span class="token keyword">@return</span>
   */</span>
  <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;handler()&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token class-name">ResponseEntity</span> result<span class="token punctuation">;</span>
    <span class="token comment">//限制字段集合</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Field</span><span class="token punctuation">&gt;</span></span> limitSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Signature 封装方法相关的信息</span>
    <span class="token class-name">Signature</span>       signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MethodSignature</span> methodSignature<span class="token punctuation">;</span>
    $$<span class="token punctuation">.</span>E<span class="token punctuation">.</span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>signature <span class="token keyword">instanceof</span> <span class="token class-name">MethodSignature</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;该注解只能用于方法上&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    methodSignature <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MethodSignature</span><span class="token punctuation">)</span> signature<span class="token punctuation">;</span>
    <span class="token class-name">Method</span> method <span class="token operator">=</span> methodSignature<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ResponseEntity</span><span class="token punctuation">)</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//获取 Method 返回的 Type</span>
    <span class="token class-name">Type</span>               returnType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getGenericReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//判断是 ParameterizedType 参数化类型，循环获取最终 Class 类型。</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>returnType <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      returnType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> returnType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//数组类型 Class 需要特殊处理</span>
    <span class="token class-name">Class</span> returnClass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        fieldSet   <span class="token operator">=</span> <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span>returnClass<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> returnClass<span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> returnClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token doc-comment comment">/**
       limitSet 有了 Field 数组可以根据注解去获取
      **/</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">OK</span> <span class="token operator">&amp;&amp;</span> $$<span class="token punctuation">.</span>V<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>limitSet<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Object</span> srcValue <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>srcValue <span class="token keyword">instanceof</span> <span class="token class-name">PageLite</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PageLite</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> srcValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> <span class="token function">convert</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> limitSet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>srcValue <span class="token keyword">instanceof</span> <span class="token class-name">Page</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> srcValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> <span class="token function">convert</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> limitSet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>srcValue <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> srcValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> <span class="token function">convert</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> limitSet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>srcValue <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> srcValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">convert</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> limitSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">convert</span><span class="token punctuation">(</span>srcValue<span class="token punctuation">,</span> limitSet<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * 通过反射将对应限制值设置为 null
   * <span class="token keyword">@param</span> <span class="token parameter">obj</span>
   * <span class="token keyword">@param</span> <span class="token parameter">limitSet</span>
   * <span class="token keyword">@return</span>
   */</span>
  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span>
                                  <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Field</span><span class="token punctuation">&gt;</span></span> limitSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> key <span class="token operator">:</span> limitSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">ReflectUtil</span><span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ParameterizedType 表示参数化类型，带有类型参数的类型，即常说的泛型，如：<code>List&lt;T&gt;、Map&lt;Integer, String&gt;、List&lt;? extends Number&gt;。</code>:</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ParameterizedType</span> <span class="token keyword">extends</span> <span class="token class-name">Type</span> <span class="token punctuation">{</span>
    <span class="token comment">// 返回确切的泛型参数, 如 Map&lt;String, Integer&gt; 返回 [String, Integer]</span>
    <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//返回当前 class 或 interface 声明的类型, 如 List&lt;?&gt; 返回 List</span>
    <span class="token class-name">Type</span> <span class="token function">getRawType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//返回所属类型. 如,当前类型为 O&lt;T&gt;.I&lt;S&gt;, 则返回 O&lt;T&gt;. 顶级类型将返回 null </span>
    <span class="token class-name">Type</span> <span class="token function">getOwnerType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>class :</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span>
                              <span class="token class-name">GenericDeclaration</span><span class="token punctuation">,</span>
                              <span class="token class-name">Type</span><span class="token punctuation">,</span>
                              <span class="token class-name">AnnotatedElement</span> <span class="token punctuation">{</span>

    <span class="token comment">//判断 Class 对象是否表示数组类</span>
    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//返回数组组件类型，若是非数组则返回 null</span>
    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Hutool 反射工具-ReflectUtil:</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectUtil</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 获得一个类中所有字段列表，包括其父类中的字段
     *
     * <span class="token keyword">@param</span> <span class="token parameter">beanClass</span> 类
     * <span class="token keyword">@return</span> 字段列表
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">SecurityException</span></span> 安全检查异常
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getFields</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SecurityException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allFields <span class="token operator">=</span> <span class="token constant">FIELDS_CACHE</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> allFields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> allFields<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        allFields <span class="token operator">=</span> <span class="token function">getFieldsDirectly</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">FIELDS_CACHE</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> allFields<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获得一个类中所有字段列表，直接反射获取，无缓存
     *
     * <span class="token keyword">@param</span> <span class="token parameter">beanClass</span>           类
     * <span class="token keyword">@param</span> <span class="token parameter">withSuperClassFieds</span> 是否包括父类的字段列表
     * <span class="token keyword">@return</span> 字段列表
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">SecurityException</span></span> 安全检查异常
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getFieldsDirectly</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass<span class="token punctuation">,</span> <span class="token keyword">boolean</span> withSuperClassFieds<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SecurityException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allFields <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> searchType <span class="token operator">=</span> beanClass<span class="token punctuation">;</span>
        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>searchType <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            declaredFields <span class="token operator">=</span> searchType<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> allFields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                allFields <span class="token operator">=</span> declaredFields<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                allFields <span class="token operator">=</span> <span class="token class-name">ArrayUtil</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>allFields<span class="token punctuation">,</span> declaredFields<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            searchType <span class="token operator">=</span> withSuperClassFieds <span class="token operator">?</span> searchType<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> allFields<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,12),d={href:"https://www.cnblogs.com/baiqiantao/p/7460580.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.pdai.tech/md/java/basic/java-basic-x-generic.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://hutool.cn/docs/#/core/%E5%B7%A5%E5%85%B7%E7%B1%BB/%E5%8F%8D%E5%B0%84%E5%B7%A5%E5%85%B7-ReflectUtil?id=%e5%8f%8d%e5%b0%84%e5%b7%a5%e5%85%b7-reflectutil",target:"_blank",rel:"noopener noreferrer"};function b(y,g){const a=p("ExternalLinkIcon");return c(),o("div",null,[k,l(" more "),r,n("ul",null,[n("li",null,[n("a",d,[s("Type 类型 泛型 反射 Class ParameterizedType"),t(a)])]),n("li",null,[n("a",v,[s("Java 基础 - 泛型机制详解"),t(a)])]),n("li",null,[n("a",m,[s("Hutool 反射工具-ReflectUtil"),t(a)])])])])}const h=e(u,[["render",b],["__file","type.html.vue"]]);export{h as default};

import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as l,c,f as o,b as n,e as a,a as t,d as i}from"./app-BFQzmSJk.js";const u={},k=n("h1",{id:"设计模式查缺补漏",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#设计模式查缺补漏"},[n("span",null,"设计模式查缺补漏")])],-1),r=i(`<h2 id="面向对象设计原则" tabindex="-1"><a class="header-anchor" href="#面向对象设计原则"><span>面向对象设计原则</span></a></h2><h3 id="单一职责原则" tabindex="-1"><a class="header-anchor" href="#单一职责原则"><span>单一职责原则</span></a></h3><ul><li>一个对象应该只包含单一的职责，并且该职责被完整地封装在一个类中</li></ul><h3 id="开闭原则" tabindex="-1"><a class="header-anchor" href="#开闭原则"><span>开闭原则</span></a></h3><ul><li>软件实体应当对扩展开放，对修改关闭</li></ul><h3 id="里氏替换原则" tabindex="-1"><a class="header-anchor" href="#里氏替换原则"><span>里氏替换原则</span></a></h3><ul><li>所用引用基类的地方必须能透明地使用其子类的对象</li></ul><h3 id="依赖倒转原则" tabindex="-1"><a class="header-anchor" href="#依赖倒转原则"><span>依赖倒转原则</span></a></h3><ul><li>高层模块不应依赖于底层模块，它们都应该依赖抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</li></ul><h3 id="接口隔离原则" tabindex="-1"><a class="header-anchor" href="#接口隔离原则"><span>接口隔离原则</span></a></h3><ul><li>客户端不应该依赖那些它不需要的接口</li></ul><h3 id="合成复用原则" tabindex="-1"><a class="header-anchor" href="#合成复用原则"><span>合成复用原则</span></a></h3><ul><li>优先使用对象组合，而不是通过继承来达到复用的目的</li></ul><h3 id="迪米特法则" tabindex="-1"><a class="header-anchor" href="#迪米特法则"><span>迪米特法则</span></a></h3><ul><li>每一个软件单位对其他单位都只有最少的知识，而且局限于那些与本单位密切相关的软件单位</li></ul><h2 id="创建型-设计模式" tabindex="-1"><a class="header-anchor" href="#创建型-设计模式"><span>创建型-设计模式</span></a></h2><h3 id="工厂方法模式" tabindex="-1"><a class="header-anchor" href="#工厂方法模式"><span>工厂方法模式</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">FruitFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Fruit</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token comment">//将工厂抽象为抽象类，添加泛型 T 由 子类指定类型</span>
  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">T</span> <span class="token function">getFruit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//不同的工厂通过此方法生产不同的类</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h4><ul><li>你可以避免创建者和具体产品之间的紧密耦合。</li><li>单一职责原则。 你可以将产品创建代码放在程序的单一位置， 从而使得代码更容易维护。</li><li>开闭原则。 无需更改现有客户端代码， 你就可以在程序中引入新的产品类型。</li></ul><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h4><ul><li>应用工厂方法模式需要引入许多新的子类， 代码可能会因此变得更复杂。 最好的情况是将该模式引入创建者类的现有层次结构中。</li></ul><h3 id="抽象工厂类" tabindex="-1"><a class="header-anchor" href="#抽象工厂类"><span>抽象工厂类</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">abstract</span>  <span class="token class-name">Phone</span> <span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">abstract</span>  <span class="token class-name">Pad</span> <span class="token function">getPad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1"><span>优点</span></a></h4><ul><li>你可以确保同一工厂生成的产品相互匹配。</li><li>你可以避免客户端和具体产品代码的耦合。</li><li>单一职责原则。 你可以将产品生成代码抽取到同一位置， 使得代码易于维护。</li><li>开闭原则。 向应用程序中引入新产品变体时， 你无需修改客户端代码。</li></ul><h4 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1"><span>缺点</span></a></h4><ul><li>由于采用该模式需要向应用中引入众多接口和类， 代码可能会比之前更加复杂。</li></ul><h3 id="建造者-生成器模式" tabindex="-1"><a class="header-anchor" href="#建造者-生成器模式"><span>建造者/生成器模式</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GirlFriend</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> bust<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> waist<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> hips<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hobby<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> birthday<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> mobile<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> hairColor<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> gift<span class="token punctuation">;</span>
    <span class="token comment">// 等等等等 ...</span>
    <span class="token comment">// 省略 getter &amp; setter ...</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">GirlFriend</span> myGirlFriend <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myGirlFriend<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;小美&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myGirlFriend<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myGirlFriend<span class="token punctuation">.</span><span class="token function">setBust</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myGirlFriend<span class="token punctuation">.</span><span class="token function">setWaist</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myGirlFriend<span class="token punctuation">.</span><span class="token function">setHips</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myGirlFriend<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span><span class="token string">&quot;2001-10-26&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myGirlFriend<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">&quot;上海浦东&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myGirlFriend<span class="token punctuation">.</span><span class="token function">setMobile</span><span class="token punctuation">(</span><span class="token string">&quot;18688888888&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myGirlFriend<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">&quot;pretty-xiaomei@qq.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myGirlFriend<span class="token punctuation">.</span><span class="token function">setHairColor</span><span class="token punctuation">(</span><span class="token string">&quot;浅棕色带点微卷&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hobby <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hobby<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;逛街&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hobby<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;购物&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hobby<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;买东西&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myGirlFriend<span class="token punctuation">.</span><span class="token function">setHobby</span><span class="token punctuation">(</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> gift <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        gift<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;情人节礼物&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;LBR 1912女王时代&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        gift<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;生日礼物&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;迪奥烈焰蓝金&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        gift<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;纪念日礼物&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;阿玛尼红管唇釉&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myGirlFriend<span class="token punctuation">.</span><span class="token function">setGift</span><span class="token punctuation">(</span>gift<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 等等等等 ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GirlFriend</span> <span class="token punctuation">{</span>
    <span class="token comment">// 省略属性 ...</span>
    <span class="token comment">// 省略 getter &amp; setter ...</span>

    <span class="token comment">// 为了演示方便，加几个聚合方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addHobby</span><span class="token punctuation">(</span><span class="token class-name">String</span> hobby<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addGift</span><span class="token punctuation">(</span><span class="token class-name">String</span> day<span class="token punctuation">,</span> <span class="token class-name">String</span> gift<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>gift <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>gift<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>gift<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>day<span class="token punctuation">,</span> gift<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVitalStatistics</span><span class="token punctuation">(</span><span class="token keyword">int</span> bust<span class="token punctuation">,</span> <span class="token keyword">int</span> waist<span class="token punctuation">,</span> <span class="token keyword">int</span> hips<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>bust <span class="token operator">=</span> bust<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>waist <span class="token operator">=</span> waist<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hips <span class="token operator">=</span> hips<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">GirlFriend</span> myGirlFriend <span class="token operator">=</span> <span class="token class-name">Builder</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">GirlFriend</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">GirlFriend</span><span class="token operator">::</span><span class="token function">setName</span><span class="token punctuation">,</span> <span class="token string">&quot;小美&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">GirlFriend</span><span class="token operator">::</span><span class="token function">setAge</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">GirlFriend</span><span class="token operator">::</span><span class="token function">setVitalStatistics</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">GirlFriend</span><span class="token operator">::</span><span class="token function">setBirthday</span><span class="token punctuation">,</span> <span class="token string">&quot;2001-10-26&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">GirlFriend</span><span class="token operator">::</span><span class="token function">setAddress</span><span class="token punctuation">,</span> <span class="token string">&quot;上海浦东&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">GirlFriend</span><span class="token operator">::</span><span class="token function">setMobile</span><span class="token punctuation">,</span> <span class="token string">&quot;18688888888&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">GirlFriend</span><span class="token operator">::</span><span class="token function">setEmail</span><span class="token punctuation">,</span> <span class="token string">&quot;pretty-xiaomei@qq.com&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">GirlFriend</span><span class="token operator">::</span><span class="token function">setHairColor</span><span class="token punctuation">,</span> <span class="token string">&quot;浅棕色带点微卷&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">GirlFriend</span><span class="token operator">::</span><span class="token function">addHobby</span><span class="token punctuation">,</span> <span class="token string">&quot;逛街&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">GirlFriend</span><span class="token operator">::</span><span class="token function">addHobby</span><span class="token punctuation">,</span> <span class="token string">&quot;购物&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">GirlFriend</span><span class="token operator">::</span><span class="token function">addHobby</span><span class="token punctuation">,</span> <span class="token string">&quot;买东西&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">GirlFriend</span><span class="token operator">::</span><span class="token function">addGift</span><span class="token punctuation">,</span> <span class="token string">&quot;情人节礼物&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;LBR 1912女王时代&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">GirlFriend</span><span class="token operator">::</span><span class="token function">addGift</span><span class="token punctuation">,</span> <span class="token string">&quot;生日礼物&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;迪奥烈焰蓝金&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">GirlFriend</span><span class="token operator">::</span><span class="token function">addGift</span><span class="token punctuation">,</span> <span class="token string">&quot;纪念日礼物&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;阿玛尼红管唇釉&quot;</span><span class="token punctuation">)</span>
                <span class="token comment">// 等等等等 ...</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 通用的 Builder 模式构建器
 *
 * <span class="token keyword">@author</span>: CipherCui
 * <span class="token keyword">@since</span> 2019/8/29
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> instantiator<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Consumer</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> modifiers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> instantiator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>instantiator <span class="token operator">=</span> instantiator<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Builder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> instantiator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Builder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>instantiator<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span>P1<span class="token punctuation">&gt;</span></span> <span class="token class-name">Builder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">Consumer1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> P1<span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">,</span> <span class="token class-name">P1</span> p1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> instance <span class="token operator">-&gt;</span> consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        modifiers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span>P1<span class="token punctuation">,</span> P2<span class="token punctuation">&gt;</span></span> <span class="token class-name">Builder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">Consumer2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> P1<span class="token punctuation">,</span> P2<span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">,</span> <span class="token class-name">P1</span> p1<span class="token punctuation">,</span> <span class="token class-name">P2</span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> instance <span class="token operator">-&gt;</span> consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        modifiers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span>P1<span class="token punctuation">,</span> P2<span class="token punctuation">,</span> P3<span class="token punctuation">&gt;</span></span> <span class="token class-name">Builder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">Consumer3</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> P1<span class="token punctuation">,</span> P2<span class="token punctuation">,</span> P3<span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">,</span> <span class="token class-name">P1</span> p1<span class="token punctuation">,</span> <span class="token class-name">P2</span> p2<span class="token punctuation">,</span> <span class="token class-name">P3</span> p3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> instance <span class="token operator">-&gt;</span> consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        modifiers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">T</span> value <span class="token operator">=</span> instantiator<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        modifiers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>modifier <span class="token operator">-&gt;</span> modifier<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        modifiers<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 1 参数 Consumer
     */</span>
    <span class="token annotation punctuation">@FunctionalInterface</span>
    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Consumer1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> P1<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">,</span> <span class="token class-name">P1</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 2 参数 Consumer
     */</span>
    <span class="token annotation punctuation">@FunctionalInterface</span>
    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Consumer2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> P1<span class="token punctuation">,</span> P2<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">,</span> <span class="token class-name">P1</span> p1<span class="token punctuation">,</span> <span class="token class-name">P2</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 3 参数 Consumer
     */</span>
    <span class="token annotation punctuation">@FunctionalInterface</span>
    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Consumer3</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> P1<span class="token punctuation">,</span> P2<span class="token punctuation">,</span> P3<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">,</span> <span class="token class-name">P1</span> p1<span class="token punctuation">,</span> <span class="token class-name">P2</span> p2<span class="token punctuation">,</span> <span class="token class-name">P3</span> p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="优点-2" tabindex="-1"><a class="header-anchor" href="#优点-2"><span>优点</span></a></h4><ul><li>你可以分步创建对象， 暂缓创建步骤或递归运行创建步骤。</li><li>生成不同形式的产品时， 你可以复用相同的制造代码。</li><li>单一职责原则。 你可以将复杂构造代码从产品的业务逻辑中分离出来。</li></ul><h4 id="缺点-2" tabindex="-1"><a class="header-anchor" href="#缺点-2"><span>缺点</span></a></h4><ul><li>由于该模式需要新增多个类， 因此代码整体复杂程度会有所增加。</li></ul><h3 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式"><span>单例模式</span></a></h3><p>懒汉单例模式</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">INSTANCE</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">INSTANCE</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//非锁模式</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Holder</span> <span class="token punctuation">{</span>
    <span class="token comment">//由于静态内部类持有单例对象，根据类加载特性，我们仅使用 Singleton 类时，不会对静态内部类进行初始化</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Holder</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="优点-3" tabindex="-1"><a class="header-anchor" href="#优点-3"><span>优点</span></a></h4><ul><li>你可以保证一个类只有一个实例。</li><li>你获得了一个指向该实例的全局访问节点。</li><li>仅在首次请求单例对象时对其进行初始化。</li></ul><h4 id="缺点-3" tabindex="-1"><a class="header-anchor" href="#缺点-3"><span>缺点</span></a></h4><ul><li>违反了单一职责原则。 该模式同时解决了两个问题。</li><li>单例模式可能掩盖不良设计， 比如程序各组件之间相互了解过多等。</li><li>该模式在多线程环境下需要进行特殊处理， 避免多个线程多次创建单例对象。</li><li>单例的客户端代码单元测试可能会比较困难， 因为许多测试框架以基于继承的方式创建模拟对象。 由于单例类的构造函数是私有的， 而且绝大部分语言无法重写静态方法， 所以你需要想出仔细考虑模拟单例的方法。 要么干脆不编写测试代码， 或者不使用单例模式。</li></ul><h3 id="原型模式" tabindex="-1"><a class="header-anchor" href="#原型模式"><span>原型模式</span></a></h3><ul><li>浅拷贝</li><li>深拷贝</li></ul><h4 id="优点-4" tabindex="-1"><a class="header-anchor" href="#优点-4"><span>优点</span></a></h4><ul><li>你可以克隆对象， 而无需与它们所属的具体类相耦合。</li><li>你可以克隆预生成原型， 避免反复运行初始化代码。</li><li>你可以更方便地生成复杂对象。</li><li>你可以用继承以外的方式来处理复杂对象的不同配置。</li></ul><h4 id="缺点-4" tabindex="-1"><a class="header-anchor" href="#缺点-4"><span>缺点</span></a></h4><ul><li>克隆包含循环引用的复杂对象可能会非常麻烦。</li></ul><h2 id="结构型-设计模式" tabindex="-1"><a class="header-anchor" href="#结构型-设计模式"><span>结构型-设计模式</span></a></h2><h3 id="类-对象适配器模式" tabindex="-1"><a class="header-anchor" href="#类-对象适配器模式"><span>类/对象适配器模式</span></a></h3><ul><li>类适配</li><li>对象适配</li></ul><h4 id="优点-5" tabindex="-1"><a class="header-anchor" href="#优点-5"><span>优点</span></a></h4><ul><li>单一职责原则你可以将接口或数据转换代码从程序主要业务逻辑中分离。</li><li>开闭原则。 只要客户端代码通过客户端接口与适配器进行交互， 你就能在不修改现有客户端代码的情况下在程序中添加新类型的适配器。</li></ul><h4 id="缺点-5" tabindex="-1"><a class="header-anchor" href="#缺点-5"><span>缺点</span></a></h4><ul><li>代码整体复杂度增加， 因为你需要新增一系列接口和类。 有时直接更改服务类使其与其他代码兼容会更简单。</li></ul><h3 id="桥接模式" tabindex="-1"><a class="header-anchor" href="#桥接模式"><span>桥接模式</span></a></h3><h4 id="优点-6" tabindex="-1"><a class="header-anchor" href="#优点-6"><span>优点</span></a></h4><ul><li>你可以创建与平台无关的类和程序。</li><li>客户端代码仅与高层抽象部分进行互动， 不会接触到平台的详细信息。</li><li>开闭原则。 你可以新增抽象部分和实现部分， 且它们之间不会相互影响。</li><li>单一职责原则。 抽象部分专注于处理高层逻辑， 实现部分处理平台细节。</li></ul><h4 id="缺点-6" tabindex="-1"><a class="header-anchor" href="#缺点-6"><span>缺点</span></a></h4><ul><li>对高内聚的类使用该模式可能会让代码更加复杂</li></ul><h3 id="组合模式" tabindex="-1"><a class="header-anchor" href="#组合模式"><span>组合模式</span></a></h3><h4 id="优点-7" tabindex="-1"><a class="header-anchor" href="#优点-7"><span>优点</span></a></h4><ul><li>你可以利用多态和递归机制更方便地使用复杂树结构。</li><li>开闭原则。 无需更改现有代码， 你就可以在应用中添加新元素， 使其成为对象树的一部分。</li></ul><h4 id="缺点-7" tabindex="-1"><a class="header-anchor" href="#缺点-7"><span>缺点</span></a></h4><ul><li>对于功能差异较大的类， 提供公共接口或许会有困难。 在特定情况下， 你需要过度一般化组件接口， 使其变得令人难以理解。</li></ul><h3 id="装饰模式" tabindex="-1"><a class="header-anchor" href="#装饰模式"><span>装饰模式</span></a></h3><p>Java 中 set 实现类</p><h4 id="优点-8" tabindex="-1"><a class="header-anchor" href="#优点-8"><span>优点</span></a></h4><ul><li>你无需创建新子类即可扩展对象的行为。</li><li>你可以在运行时添加或删除对象的功能。</li><li>你可以用多个装饰封装对象来组合几种行为。</li><li>单一职责原则。 你可以将实现了许多不同行为的一个大类拆分为多个较小的类。</li></ul><h4 id="缺点-8" tabindex="-1"><a class="header-anchor" href="#缺点-8"><span>缺点</span></a></h4><ul><li>在封装器栈中删除特定封装器比较困难。</li><li>实现行为不受装饰栈顺序影响的装饰比较困难。</li><li>各层的初始化配置代码看上去可能会很糟糕。</li></ul><h3 id="代理模式" tabindex="-1"><a class="header-anchor" href="#代理模式"><span>代理模式</span></a></h3><h4 id="优点-9" tabindex="-1"><a class="header-anchor" href="#优点-9"><span>优点</span></a></h4><ul><li>你可以在客户端毫无察觉的情况下控制服务对象。</li><li>如果客户端对服务对象的生命周期没有特殊要求， 你可以对生命周期进行管理。</li><li>即使服务对象还未准备好或不存在， 代理也可以正常工作。</li><li>开闭原则。 你可以在不对服务或客户端做出修改的情况下创建新代理。</li></ul><h4 id="缺点-9" tabindex="-1"><a class="header-anchor" href="#缺点-9"><span>缺点</span></a></h4><ul><li>代码可能会变得复杂， 因为需要新建许多类。</li><li>服务响应可能会延迟。</li></ul><h3 id="外观模式" tabindex="-1"><a class="header-anchor" href="#外观模式"><span>外观模式</span></a></h3><h4 id="优点-10" tabindex="-1"><a class="header-anchor" href="#优点-10"><span>优点</span></a></h4><ul><li>你可以让自己的代码独立于复杂子系统。</li></ul><h4 id="缺点-10" tabindex="-1"><a class="header-anchor" href="#缺点-10"><span>缺点</span></a></h4><ul><li>外观可能成为与程序中所有类都耦合的上帝对象。</li></ul><h3 id="享元模式" tabindex="-1"><a class="header-anchor" href="#享元模式"><span>享元模式</span></a></h3><h4 id="优点-11" tabindex="-1"><a class="header-anchor" href="#优点-11"><span>优点</span></a></h4><ul><li>如果程序中有很多相似对象， 那么你将可以节省大量内存。</li></ul><h4 id="缺点-11" tabindex="-1"><a class="header-anchor" href="#缺点-11"><span>缺点</span></a></h4><ul><li>你可能需要牺牲执行速度来换取内存， 因为他人每次调用享元方法时都需要重新计算部分情景数据。</li><li>代码会变得更加复杂。 团队中的新成员总是会问： ​ “为什么要像这样拆分一个实体的状态？”。</li></ul><h2 id="行为型-设计模式" tabindex="-1"><a class="header-anchor" href="#行为型-设计模式"><span>行为型-设计模式</span></a></h2><h3 id="解释器模式" tabindex="-1"><a class="header-anchor" href="#解释器模式"><span>解释器模式</span></a></h3><ul><li>很少使用</li></ul><h3 id="模板方法模式" tabindex="-1"><a class="header-anchor" href="#模板方法模式"><span>模板方法模式</span></a></h3><h4 id="优点-12" tabindex="-1"><a class="header-anchor" href="#优点-12"><span>优点</span></a></h4><ul><li>你可仅允许客户端重写一个大型算法中的特定部分， 使得算法其他部分修改对其所造成的影响减小。</li><li>你可将重复代码提取到一个超类中。</li></ul><h4 id="缺点-12" tabindex="-1"><a class="header-anchor" href="#缺点-12"><span>缺点</span></a></h4><ul><li>部分客户端可能会受到算法框架的限制。</li><li>通过子类抑制默认步骤实现可能会导致违反里氏替换原则。</li><li>模板方法中的步骤越多， 其维护工作就可能会越困难。</li></ul><h3 id="责任链模式" tabindex="-1"><a class="header-anchor" href="#责任链模式"><span>责任链模式</span></a></h3><h4 id="优点-13" tabindex="-1"><a class="header-anchor" href="#优点-13"><span>优点</span></a></h4><ul><li>你可以控制请求处理的顺序。</li><li>单一职责原则。 你可对发起操作和执行操作的类进行解耦。</li><li>开闭原则。 你可以在不更改现有代码的情况下在程序中新增处理者。</li></ul><h4 id="缺点-13" tabindex="-1"><a class="header-anchor" href="#缺点-13"><span>缺点</span></a></h4><ul><li>部分请求可能未被处理。</li></ul><h3 id="命令模式" tabindex="-1"><a class="header-anchor" href="#命令模式"><span>命令模式</span></a></h3><h4 id="优点-14" tabindex="-1"><a class="header-anchor" href="#优点-14"><span>优点</span></a></h4><ul><li>单一职责原则。 你可以解耦触发和执行操作的类。</li><li>开闭原则。 你可以在不修改已有客户端代码的情况下在程序中创建新的命令。</li><li>你可以实现撤销和恢复功能。</li><li>你可以实现操作的延迟执行。</li><li>你可以将一组简单命令组合成一个复杂命令。</li></ul><h4 id="缺点-14" tabindex="-1"><a class="header-anchor" href="#缺点-14"><span>缺点</span></a></h4><ul><li>代码可能会变得更加复杂， 因为你在发送者和接收者之间增加了一个全新的层次。</li></ul><h3 id="迭代器模式" tabindex="-1"><a class="header-anchor" href="#迭代器模式"><span>迭代器模式</span></a></h3><h4 id="优点-15" tabindex="-1"><a class="header-anchor" href="#优点-15"><span>优点</span></a></h4><ul><li>单一职责原则。 通过将体积庞大的遍历算法代码抽取为独立的类， 你可对客户端代码和集合进行整理。</li><li>开闭原则。 你可实现新型的集合和迭代器并将其传递给现有代码， 无需修改现有代码。</li><li>你可以并行遍历同一集合， 因为每个迭代器对象都包含其自身的遍历状态。</li><li>相似的， 你可以暂停遍历并在需要时继续。</li></ul><h4 id="缺点-15" tabindex="-1"><a class="header-anchor" href="#缺点-15"><span>缺点</span></a></h4><ul><li>如果你的程序只与简单的集合进行交互， 应用该模式可能会矫枉过正。</li><li>对于某些特殊集合， 使用迭代器可能比直接遍历的效率低。</li></ul><h3 id="中介者模式" tabindex="-1"><a class="header-anchor" href="#中介者模式"><span>中介者模式</span></a></h3><h4 id="优点-16" tabindex="-1"><a class="header-anchor" href="#优点-16"><span>优点</span></a></h4><ul><li>单一职责原则。 你可以将多个组件间的交流抽取到同一位置， 使其更易于理解和维护。</li><li>开闭原则。 你无需修改实际组件就能增加新的中介者。</li><li>你可以减轻应用中多个组件间的耦合情况。</li><li>你可以更方便地复用各个组件。</li></ul><h4 id="缺点-16" tabindex="-1"><a class="header-anchor" href="#缺点-16"><span>缺点</span></a></h4><ul><li>一段时间后， 中介者可能会演化成为上帝对象。</li></ul><h3 id="备忘录模式" tabindex="-1"><a class="header-anchor" href="#备忘录模式"><span>备忘录模式</span></a></h3><h4 id="优点-17" tabindex="-1"><a class="header-anchor" href="#优点-17"><span>优点</span></a></h4><ul><li>你可以在不破坏对象封装情况的前提下创建对象状态快照。</li><li>你可以通过让负责人维护原发器状态历史记录来简化原发器代码。-</li></ul><h4 id="缺点-17" tabindex="-1"><a class="header-anchor" href="#缺点-17"><span>缺点</span></a></h4><ul><li>如果客户端过于频繁地创建备忘录， 程序将消耗大量内存。</li><li>负责人必须完整跟踪原发器的生命周期， 这样才能销毁弃用的备忘录。</li><li>绝大部分动态编程语言 （例如 PHP、 Python 和 JavaScript） 不能确保备忘录中的状态不被修改。</li></ul><h3 id="观察者模式" tabindex="-1"><a class="header-anchor" href="#观察者模式"><span>观察者模式</span></a></h3><h4 id="优点-18" tabindex="-1"><a class="header-anchor" href="#优点-18"><span>优点</span></a></h4><ul><li>开闭原则。 你无需修改发布者代码就能引入新的订阅者类 （如果是发布者接口则可轻松引入发布者类）。</li><li>你可以在运行时建立对象之间的联系。</li></ul><h4 id="缺点-18" tabindex="-1"><a class="header-anchor" href="#缺点-18"><span>缺点</span></a></h4><ul><li>订阅者的通知顺序是随机的。</li></ul><h3 id="状态模式" tabindex="-1"><a class="header-anchor" href="#状态模式"><span>状态模式</span></a></h3><h4 id="优点-19" tabindex="-1"><a class="header-anchor" href="#优点-19"><span>优点</span></a></h4><ul><li>单一职责原则。 将与特定状态相关的代码放在单独的类中。</li><li>开闭原则。 无需修改已有状态类和上下文就能引入新状态。</li><li>通过消除臃肿的状态机条件语句简化上下文代码。</li></ul><h4 id="缺点-19" tabindex="-1"><a class="header-anchor" href="#缺点-19"><span>缺点</span></a></h4><ul><li>如果状态机只有很少的几个状态， 或者很少发生改变， 那么应用该模式可能会显得小题大作。</li></ul><h3 id="策略模式" tabindex="-1"><a class="header-anchor" href="#策略模式"><span>策略模式</span></a></h3><h4 id="优点-20" tabindex="-1"><a class="header-anchor" href="#优点-20"><span>优点</span></a></h4><ul><li>你可以在运行时切换对象内的算法。</li><li>你可以将算法的实现和使用算法的代码隔离开来。</li><li>你可以使用组合来代替继承。</li><li>开闭原则。 你无需对上下文进行修改就能够引入新的策略。</li></ul><h4 id="缺点-20" tabindex="-1"><a class="header-anchor" href="#缺点-20"><span>缺点</span></a></h4><ul><li>如果你的算法极少发生改变， 那么没有任何理由引入新的类和接口。 使用该模式只会让程序过于复杂。</li><li>客户端必须知晓策略间的不同——它需要选择合适的策略。</li><li>许多现代编程语言支持函数类型功能， 允许你在一组匿名函数中实现不同版本的算法。 这样， 你使用这些函数的方式就和使用策略对象时完全相同， 无需借助额外的类和接口来保持代码简洁。</li></ul><h3 id="访问者模式" tabindex="-1"><a class="header-anchor" href="#访问者模式"><span>访问者模式</span></a></h3><h4 id="优点-21" tabindex="-1"><a class="header-anchor" href="#优点-21"><span>优点</span></a></h4><ul><li>开闭原则。 你可以引入在不同类对象上执行的新行为， 且无需对这些类做出修改。</li><li>单一职责原则。 可将同一行为的不同版本移到同一个类中。</li><li>访问者对象可以在与各种对象交互时收集一些有用的信息。 当你想要遍历一些复杂的对象结构 （例如对象树）， 并在结构中的每个对象上应用访问者时， 这些信息可能会有所帮助。</li></ul><h4 id="缺点-21" tabindex="-1"><a class="header-anchor" href="#缺点-21"><span>缺点</span></a></h4><ul><li>每次在元素层次结构中添加或移除一个类时， 你都要更新所有的访问者。</li><li>在访问者同某个元素进行交互时， 它们可能没有访问元素私有成员变量和方法的必要权限。-</li></ul><h2 id="项目所用到" tabindex="-1"><a class="header-anchor" href="#项目所用到"><span>项目所用到</span></a></h2><ul><li>创建型 <ul><li>工厂方法模式</li><li>抽象工厂类</li><li>建造者/生成器模式</li><li>单例模式</li></ul></li><li>结构型 <ul><li>适配器模式</li><li>桥接模式</li><li>组合模式</li><li>装饰器模式</li><li>代理模式</li><li>外观模式</li></ul></li><li>行为型 <ul><li>模板方法模式</li><li>责任链模式</li><li>命令模式</li><li>迭代器模式</li><li>观察者模式</li><li>策略模式</li></ul></li></ul><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2>`,144),d={href:"https://www.bilibili.com/video/BV1u3411P7Na?p=12&vd_source=f0beb2431826546e7a6a41470db9e9f4",target:"_blank",rel:"noopener noreferrer"},h=n("br",null,null,-1),v={href:"https://refactoringguru.cn/design-patterns/prototype",target:"_blank",rel:"noopener noreferrer"};function m(b,g){const s=e("ExternalLinkIcon");return l(),c("div",null,[k,o(" more "),r,n("p",null,[n("a",d,[a("Java 设计模式 已完结（IDEA 2022.1最新版）4K蓝光画质+杜比音效"),t(s)]),h,n("a",v,[a("设计模式"),t(s)])])])}const w=p(u,[["render",m],["__file","design_patterns.html.vue"]]),x=JSON.parse('{"path":"/posts/coding-related/java/design_patterns.html","title":"设计模式查缺补漏","lang":"zh-CN","frontmatter":{"title":"设计模式查缺补漏","icon":"fa-brands fa-java","date":"2024-01-11T00:00:00.000Z","category":["编程"],"tag":["设计模式"],"head":[["meta",{"property":"og:url","content":"https://zjiac.github.io/tech-arch-doc/tech-arch-doc/posts/coding-related/java/design_patterns.html"}],["meta",{"property":"og:site_name","content":"zJiac 个人知识体系"}],["meta",{"property":"og:title","content":"设计模式查缺补漏"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-20T02:08:45.000Z"}],["meta",{"property":"article:author","content":"zJiaC"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2024-01-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-20T02:08:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式查缺补漏\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-20T02:08:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zJiaC\\",\\"url\\":\\"https://zjiac.github.io/tech-arch-doc/\\"}]}"]]},"headers":[{"level":2,"title":"面向对象设计原则","slug":"面向对象设计原则","link":"#面向对象设计原则","children":[{"level":3,"title":"单一职责原则","slug":"单一职责原则","link":"#单一职责原则","children":[]},{"level":3,"title":"开闭原则","slug":"开闭原则","link":"#开闭原则","children":[]},{"level":3,"title":"里氏替换原则","slug":"里氏替换原则","link":"#里氏替换原则","children":[]},{"level":3,"title":"依赖倒转原则","slug":"依赖倒转原则","link":"#依赖倒转原则","children":[]},{"level":3,"title":"接口隔离原则","slug":"接口隔离原则","link":"#接口隔离原则","children":[]},{"level":3,"title":"合成复用原则","slug":"合成复用原则","link":"#合成复用原则","children":[]},{"level":3,"title":"迪米特法则","slug":"迪米特法则","link":"#迪米特法则","children":[]}]},{"level":2,"title":"创建型-设计模式","slug":"创建型-设计模式","link":"#创建型-设计模式","children":[{"level":3,"title":"工厂方法模式","slug":"工厂方法模式","link":"#工厂方法模式","children":[]},{"level":3,"title":"抽象工厂类","slug":"抽象工厂类","link":"#抽象工厂类","children":[]},{"level":3,"title":"建造者/生成器模式","slug":"建造者-生成器模式","link":"#建造者-生成器模式","children":[]},{"level":3,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[]},{"level":3,"title":"原型模式","slug":"原型模式","link":"#原型模式","children":[]}]},{"level":2,"title":"结构型-设计模式","slug":"结构型-设计模式","link":"#结构型-设计模式","children":[{"level":3,"title":"类/对象适配器模式","slug":"类-对象适配器模式","link":"#类-对象适配器模式","children":[]},{"level":3,"title":"桥接模式","slug":"桥接模式","link":"#桥接模式","children":[]},{"level":3,"title":"组合模式","slug":"组合模式","link":"#组合模式","children":[]},{"level":3,"title":"装饰模式","slug":"装饰模式","link":"#装饰模式","children":[]},{"level":3,"title":"代理模式","slug":"代理模式","link":"#代理模式","children":[]},{"level":3,"title":"外观模式","slug":"外观模式","link":"#外观模式","children":[]},{"level":3,"title":"享元模式","slug":"享元模式","link":"#享元模式","children":[]}]},{"level":2,"title":"行为型-设计模式","slug":"行为型-设计模式","link":"#行为型-设计模式","children":[{"level":3,"title":"解释器模式","slug":"解释器模式","link":"#解释器模式","children":[]},{"level":3,"title":"模板方法模式","slug":"模板方法模式","link":"#模板方法模式","children":[]},{"level":3,"title":"责任链模式","slug":"责任链模式","link":"#责任链模式","children":[]},{"level":3,"title":"命令模式","slug":"命令模式","link":"#命令模式","children":[]},{"level":3,"title":"迭代器模式","slug":"迭代器模式","link":"#迭代器模式","children":[]},{"level":3,"title":"中介者模式","slug":"中介者模式","link":"#中介者模式","children":[]},{"level":3,"title":"备忘录模式","slug":"备忘录模式","link":"#备忘录模式","children":[]},{"level":3,"title":"观察者模式","slug":"观察者模式","link":"#观察者模式","children":[]},{"level":3,"title":"状态模式","slug":"状态模式","link":"#状态模式","children":[]},{"level":3,"title":"策略模式","slug":"策略模式","link":"#策略模式","children":[]},{"level":3,"title":"访问者模式","slug":"访问者模式","link":"#访问者模式","children":[]}]},{"level":2,"title":"项目所用到","slug":"项目所用到","link":"#项目所用到","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1704966658000,"updatedTime":1713578925000,"contributors":[{"name":"zJiaC","email":"425226133@qq.com","commits":2}]},"readingTime":{"minutes":14.07,"words":4220},"filePathRelative":"posts/coding-related/java/design_patterns.md","localizedDate":"2024年1月11日","excerpt":"\\n"}');export{w as comp,x as data};

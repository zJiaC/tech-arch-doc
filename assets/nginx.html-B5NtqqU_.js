import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,f as s,d as i,o as r}from"./app-X9Qm7P3-.js";const l={};function p(o,e){return r(),a("div",null,[e[0]||(e[0]=n("h1",{id:"nginx",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nginx"},[n("span",null,"Nginx")])],-1)),s(" more "),e[1]||(e[1]=i(`<h2 id="强制-http-跳转-https" tabindex="-1"><a class="header-anchor" href="#强制-http-跳转-https"><span>强制 HTTP 跳转 HTTPS</span></a></h2><h3 id="使用-nginx-将-http-重定向到-https" tabindex="-1"><a class="header-anchor" href="#使用-nginx-将-http-重定向到-https"><span><a href="https://mincong.io/cn/redirect-traffic-to-https-nginx/" target="_blank" rel="noopener noreferrer">使用 Nginx 将 HTTP 重定向到 HTTPS</a></span></a></h3><ul><li>配置重定向:</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>  server {</span></span>
<span class="line"><span>    listen       80;</span></span>
<span class="line"><span>    server_name  _;</span></span>
<span class="line"><span>    return       301 https://$host$request_uri;</span></span>
<span class="line"><span>  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>!&gt; 这里的服务器名字(server name)是个通配符_：也就是无论 URL 中包含什么域名，当请求到达 Nginx 服务器以后，都会被重定向到 HTTPS。比如说，无论是 <a href="http://sever.info" target="_blank" rel="noopener noreferrer">http://sever.info</a> 还是 <a href="http://www.sever.info" target="_blank" rel="noopener noreferrer">http://www.sever.info</a> 都会被重定向到它们相应的 HTTPS 链接。</p><h3 id="项目处于安全考虑-通过-nginx-强制-http-转换成-https-但遇到报-get-不支持错误。" tabindex="-1"><a class="header-anchor" href="#项目处于安全考虑-通过-nginx-强制-http-转换成-https-但遇到报-get-不支持错误。"><span><a href="https://blog.csdn.net/qq_42760638/article/details/118515698" target="_blank" rel="noopener noreferrer">项目处于安全考虑，通过 nginx 强制 http 转换成 https，但遇到报 GET 不支持错误。</a></span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>	server {</span></span>
<span class="line"><span>        ***</span></span>
<span class="line"><span>        //返回301永久重定向，307也是临时重定向，但它可以保持原请求的方法，不做修改的访问新地址。</span></span>
<span class="line"><span>-        return       301 https://$host$request_uri;</span></span>
<span class="line"><span>+        return       307 https://$host$request_uri;</span></span>
<span class="line"><span>        ***</span></span>
<span class="line"><span>	}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3xx-重定向" tabindex="-1"><a class="header-anchor" href="#_3xx-重定向"><span>3XX 重定向</span></a></h3><ul><li>301 Moved Permanently : 永久性重定向</li><li>302 Found : 临时性重定向</li><li>303 See Other : 和- 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。 注: 虽然 HTTP 协议规定 301、302 状态下重定向时不允许把 POST 方法改成 GET 方法，但是大多数浏览器都会在 301、302 和 303 状态下的重定向把 POST 方法改成 GET 方法。</li><li>304 Not Modified : 如果请求报文首部包含一些条件，例如: If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回 304 状态码。</li><li>307 Temporary Redirect : 临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法。</li></ul><p>!&gt; <a href="https://www.pdai.tech/md/develop/protocol/dev-protocol-http.html#url" target="_blank" rel="noopener noreferrer">网络协议 - HTTP 协议详解</a></p>`,10))])}const h=t(l,[["render",p]]),g=JSON.parse('{"path":"/posts/question/nginx.html","title":"Nginx","lang":"zh-CN","frontmatter":{"icon":"nginx","order":7,"date":"2022-04-29T00:00:00.000Z","category":["问题","运维"],"tag":["Nginx"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Nginx\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-29T00:00:00.000Z\\",\\"dateModified\\":\\"2022-06-14T07:49:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zJiaC\\",\\"url\\":\\"https://zjiac.github.io/tech-arch-doc/\\"}]}"],["meta",{"property":"og:url","content":"https://zjiac.github.io/tech-arch-doc/tech-arch-doc/posts/question/nginx.html"}],["meta",{"property":"og:site_name","content":"zJiac 个人知识体系"}],["meta",{"property":"og:title","content":"Nginx"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-06-14T07:49:08.000Z"}],["meta",{"property":"article:tag","content":"Nginx"}],["meta",{"property":"article:published_time","content":"2022-04-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-06-14T07:49:08.000Z"}]]},"git":{"createdTime":1653376909000,"updatedTime":1655192948000,"contributors":[{"name":"zJiaC","username":"zJiaC","email":"jc456123","commits":8,"url":"https://github.com/zJiaC"}]},"readingTime":{"minutes":1.43,"words":430},"filePathRelative":"posts/question/nginx.md","excerpt":"\\n"}');export{h as comp,g as data};
